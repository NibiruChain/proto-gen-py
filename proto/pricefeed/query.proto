syntax = "proto3";
package nibiru.pricefeed.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

import "pricefeed/params.proto";

option go_package = "github.com/NibiruChain/nibiru/x/pricefeed/types";
option (gogoproto.equal_all)         = true;
option (gogoproto.verbose_equal_all) = true;

// Query defines the gRPC querier service for pricefeed module
service Query {
  // QueryParams queries all parameters of the pricefeed module.
  rpc QueryParams(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/nibiru/pricefeed/v1beta1/params";
  }

  // QueryPrice queries price details for a pair
  rpc QueryPrice(QueryPriceRequest) returns (QueryPriceResponse) {
    option (google.api.http).get = "/nibiru/pricefeed/v1beta1/prices/{pair_id}";
  }

  // QueryPrices queries all prices
  rpc QueryPrices(QueryPricesRequest) returns (QueryPricesResponse) {
    option (google.api.http).get = "/nibiru/pricefeed/v1beta1/prices";
  }

  // QueryRawPrices queries all raw prices for an asset pair
  rpc QueryRawPrices(QueryRawPricesRequest) returns (QueryRawPricesResponse) {
    option (google.api.http).get = "/nibiru/pricefeed/v1beta1/rawprices/{pair_id}";
  }

  // QueryOracles queries all oracles for an asset pair
  rpc QueryOracles(QueryOraclesRequest) returns (QueryOraclesResponse) {
    option (google.api.http).get = "/nibiru/pricefeed/v1beta1/oracles/{pair_id}";
  }

  // QueryMarkets queries all markets
  rpc QueryMarkets(QueryMarketsRequest) returns (QueryMarketsResponse) {
    option (google.api.http).get = "/nibiru/pricefeed/v1beta1/markets";
  }
}

// QueryParamsRequest defines the request type for querying x/pricefeed
// parameters.
message QueryParamsRequest {}

// QueryParamsResponse defines the response type for querying x/pricefeed
// parameters.
message QueryParamsResponse {
  option (gogoproto.goproto_getters) = false;

  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryPriceRequest is the request type for the Query/PriceRequest RPC method.
message QueryPriceRequest {
  option (gogoproto.goproto_getters) = false;

  string pair_id = 1;
}

// QueryPriceResponse is the response type for the Query/Prices RPC method.
message QueryPriceResponse {
  option (gogoproto.goproto_getters) = false;

  CurrentPriceResponse price = 1 [(gogoproto.nullable) = false];
}

// QueryPricesRequest is the request type for the Query/Prices RPC method.
message QueryPricesRequest {}

// QueryPricesResponse is the response type for the Query/Prices RPC method.
message QueryPricesResponse {
  option (gogoproto.goproto_getters) = false;

  repeated CurrentPriceResponse prices = 1
      [(gogoproto.castrepeated) = "CurrentPriceResponses", (gogoproto.nullable) = false];
}

// QueryRawPricesRequest is the request type for the Query/RawPrices RPC method.
message QueryRawPricesRequest {
  option (gogoproto.goproto_getters) = false;

  string pair_id = 1;
}

// QueryRawPricesResponse is the response type for the Query/RawPrices RPC
// method.
message QueryRawPricesResponse {
  option (gogoproto.goproto_getters) = false;

  repeated PostedPriceResponse raw_prices = 1
      [(gogoproto.castrepeated) = "PostedPriceResponses", (gogoproto.nullable) = false];
}

// QueryOraclesRequest is the request type for the Query/Oracles RPC method.
message QueryOraclesRequest {
  option (gogoproto.goproto_getters) = false;

  string pair_id = 1;
}

// QueryOraclesResponse is the response type for the Query/Oracles RPC method.
message QueryOraclesResponse {
  option (gogoproto.goproto_getters) = false;

  // List of oracle addresses
  repeated string oracles = 1;
}

// QueryMarketsRequest is the request type for the Query/Pairs RPC method.
message QueryMarketsRequest {}

// QueryMarketsResponse is the response type for the Query/Pairs RPC method.
message QueryMarketsResponse {
  option (gogoproto.goproto_getters) = false;

  repeated Market markets = 1 [
    (gogoproto.castrepeated) = "Markets", 
    (gogoproto.nullable) = false];
}

// PostedPriceResponse defines a price for 'PairID' posted by a specific oracle.
message PostedPriceResponse {
  string pair_id      = 1 [(gogoproto.customname) = "PairID"];
  string oracle_address = 2;
  string price = 3 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  google.protobuf.Timestamp expiry = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

// CurrentPriceResponse defines a current price for a particular 'PairID' in the pricefeed
// module.
message CurrentPriceResponse {
  string pair_id = 1 [(gogoproto.customname) = "PairID"];
  string price = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

// Market defines an asset in the pricefeed.
message Market {
  string          pair_id   = 1 [(gogoproto.customname) = "PairID"];
  repeated string oracles     = 2;
  bool            active      = 3;
}
