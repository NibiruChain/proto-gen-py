syntax = "proto3";
package nibiru.pricefeed.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

option go_package = "github.com/NibiruChain/nibiru/x/pricefeed/types";
option (gogoproto.equal_all)         = true;
option (gogoproto.verbose_equal_all) = true;

// Msg defines the pricefeed Msg service.
service Msg {
  // PostPrice defines a method for creating a new post price
  rpc PostPrice(MsgPostPrice) returns (MsgPostPriceResponse) {
    option (google.api.http).post = "/nibiru/pricefeed/post-price";
  }
}

// MsgPostPrice represents a method for creating a new post price
message MsgPostPrice {
  option (gogoproto.goproto_getters) = false;

  // From: address of oracle
  string oracle = 1;
  // Token0: denominator unit of the price, a.k.a. quote asset
  string token0 = 2 ;
  // Token1: numerator unit of price, a.k.a. base asset
  string token1 = 3 ;
  // Price: Price of the trading pair in units of token1 / token0.
  string price = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
  google.protobuf.Timestamp expiry = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

// MsgPostPriceResponse defines the Msg/PostPrice response type.
message MsgPostPriceResponse {}

message EventOracleUpdatePrice {
  string pair_id = 1;
  string oracle = 2;
  string pair_price = 3  [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];;
  google.protobuf.Timestamp expiry = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message EventPairPriceUpdated {
  string pair_id = 1;
  string pair_price = 2  [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];;
}