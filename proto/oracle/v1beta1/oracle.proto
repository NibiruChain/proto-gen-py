syntax = "proto3";
package nibiru.oracle.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/NibiruChain/nibiru/x/oracle/types";

// Params defines the parameters for the oracle module.
message Params {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  uint64 vote_period    = 1 [(gogoproto.moretags) = "yaml:\"vote_period\""];
  string vote_threshold = 2 [
    (gogoproto.moretags)   = "yaml:\"vote_threshold\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
  string reward_band = 3 [
    (gogoproto.moretags)   = "yaml:\"reward_band\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
  repeated string whitelist                  = 4 [
    (gogoproto.moretags)     = "yaml:\"whitelist\""
  ];
  string slash_fraction = 5 [
    (gogoproto.moretags)   = "yaml:\"slash_fraction\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
  uint64 slash_window         = 6 [(gogoproto.moretags) = "yaml:\"slash_window\""];
  string min_valid_per_window = 7 [
    (gogoproto.moretags)   = "yaml:\"min_valid_per_window\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// struct for aggregate prevoting on the ExchangeRateVote.
// The purpose of aggregate prevote is to hide vote exchange rates with hash
// which is formatted as hex string in SHA256("{salt}:({pair},{exchange_rate})|...|({pair},{exchange_rate}):{voter}")
message AggregateExchangeRatePrevote {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  string hash         = 1 [(gogoproto.moretags) = "yaml:\"hash\""];
  string voter        = 2 [(gogoproto.moretags) = "yaml:\"voter\""];
  uint64 submit_block = 3 [(gogoproto.moretags) = "yaml:\"submit_block\""];
}

// MsgAggregateExchangeRateVote - struct for voting on
// the exchange rates different assets.
message AggregateExchangeRateVote {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  repeated ExchangeRateTuple exchange_rate_tuples = 1 [
    (gogoproto.moretags)     = "yaml:\"exchange_rate_tuples\"",
    (gogoproto.castrepeated) = "ExchangeRateTuples",
    (gogoproto.nullable)     = false
  ];

  string voter = 2 [(gogoproto.moretags) = "yaml:\"voter\""];
}

// ExchangeRateTuple - struct to store interpreted exchange rates data to store
message ExchangeRateTuple {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  string pair        = 1 [(gogoproto.moretags) = "yaml:\"pair\""];
  string exchange_rate = 2 [
    (gogoproto.moretags)   = "yaml:\"exchange_rate\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// PairReward defines a credit object towards validators
// which provide prices faithfully for different pairs.
message PairReward {
  // pair defines the pair for which we incentivize validator to provide prices for.
  string pair = 1;
  // id uniquely identifies the rewards instance of the pair
  uint64 id = 2;
  // vote_periods defines the vote periods left in which rewards will be distributed.
  uint64 vote_periods = 3;
  // coins defines the amount of coins to distribute in a single vote period.
  repeated cosmos.base.v1beta1.Coin coins = 4 [(gogoproto.nullable) = false];
}