syntax = "proto3";

package nibiru.perp.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "perp/v1/state.proto";

option go_package = "github.com/NibiruChain/nibiru/x/perp/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the x/perp module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/nibiru/perp/params";
  }

  rpc QueryPosition(QueryPositionRequest)
      returns (QueryPositionResponse) {
    option (google.api.http).get = "/nibiru/perp/position";
  }

  rpc QueryPositions(QueryPositionsRequest)
      returns (QueryPositionsResponse) {
    option (google.api.http).get = "/nibiru/perp/positions";
  }  

  rpc FundingRates(QueryFundingRatesRequest)
      returns (QueryFundingRatesResponse) {
    option (google.api.http).get = "/nibiru/perp/funding_rates";
  }
}

// ---------------------------------------- Params

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// ---------------------------------------- Positions
message QueryPositionsRequest {
  string trader = 1;  
}

message QueryPositionsResponse {
  repeated QueryPositionResponse positions = 1;
}

// ---------------------------------------- Position

// QueryPositionRequest is the request type for the position of the x/perp
// module account.
message QueryPositionRequest {
  string token_pair = 1;

  string trader = 2;
}



message QueryPositionResponse {
  // The position as it exists in the blockchain state
  Position position = 1;

  // The position's current notional value, if it were to be entirely closed (in
  // margin units).
  string position_notional = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The position's unrealized PnL.
  string unrealized_pnl = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // margin ratio of the position based on the mark price, mark TWAP. The higher
  // value of the possible margin ratios (TWAP and instantaneous) is taken to be
  // 'marginRatioMark'. Calculated from margin, unrealized PnL, and position
  // notional.
  string margin_ratio_mark = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // margin ratio of the position based on the index price. Calculated from
  // margin, unrealized PnL, and position notional.
  string margin_ratio_index = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // BlockNumber is current block number at the time of query.
  int64 block_number = 7;
}

// ---------------------------------------- FundingPayments

message QueryFundingRatesRequest {
  // the pair to query for
  string pair = 1;
}

message QueryFundingRatesResponse {
  // a historical list of cumulative funding rates, with the most recent one
  // last
  repeated string cumulative_funding_rates = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}