syntax="proto3";

package nibiru.incentivization.v1;

option go_package = "github.com/NibiruChain/nibiru/x/incentivization/types";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";


service Msg {
  // CreateIncentivizationProgram allows an entity to create an incentivization program for a liquidity pool.
  rpc CreateIncentivizationProgram(MsgCreateIncentivizationProgram
  ) returns (MsgCreateIncentivizationProgramResponse) {
    option (google.api.http).post = "/nibiru/incentivization/create";
  }
  // FundIncentivizationProgram allows an entity to fund an already existing incentivization program with more coins.
  rpc FundIncentivizationProgram(MsgFundIncentivizationProgram
  ) returns (MsgFundIncentivizationProgramResponse) {
    option (google.api.http).post = "/nibiru/incentivization/fund";
  }
}


// MsgCreateIncentivizationProgram is the request needed for the CreateIncentivizationProgram RPC.
message MsgCreateIncentivizationProgram {
  // sender defines the sender of the msg that needs to be signed.
  string sender = 1;
  // lp_denom defines the liquidity pool denom that we want to incentivize.
  string lp_denom = 2;
  // min_lockup_duration defines the minimum lockup duration
  // required on the lp_denom to get the incentivization.
  google.protobuf.Duration min_lockup_duration = 3 [(gogoproto.stdduration) = true];
  // start_time identifies when the incentivization starts.
  google.protobuf.Timestamp start_time = 4 [(gogoproto.stdtime) = true];
  // epochs defines the number of epochs the incentivization
  // program will last.
  int64 epochs = 5;
  // initial_funds defines the initial funds to bootstrap the incentivization program's escrow.
  // This is optional.
  repeated cosmos.base.v1beta1.Coin initial_funds = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgCreateIncentivizationProgramResponse is the response returned by the CreateIncentivizationProgram RPC.
message MsgCreateIncentivizationProgramResponse {
  // program_id defines the incentivization program unique identifier.
  uint64 program_id = 1;
}

// MsgFundIncentivizationProgram is the request for the FundIncentivizationProgram RPC.
message MsgFundIncentivizationProgram {
  // sender is the sender of the requests
  string sender = 1;
  // id marks the incentivization program id.
  uint64 id = 2;
  // funds is the amount of money sender deposits in the program funding escrow.
  repeated cosmos.base.v1beta1.Coin funds = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgFundIncentivizationProgramResponse {

}

// IncentivizationProgram defines how an incentivization program looks like.
message IncentivizationProgram {
  // id defines the unique uint64 id of the program
  uint64 id = 1;
  // escrow_address defines the escrow module account address
  // for the incentivization program.
  string escrow_address = 2;
  // remaining_epochs defines the number of epochs left before the incentivization
  // program can be considered finalized.
  int64 remaining_epochs = 3;
  // lp_denom defines the liquidity pool denom that is being incentivized.
  string lp_denom = 4;
  // min_lockup_duration defines the minimum lp_denom lockup period
  // required to get the epochs' rewards.
  google.protobuf.Duration min_lockup_duration = 5 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];
  // start_time defines the incentivization program start time.
  google.protobuf.Timestamp start_time = 6 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message GenesisState {
  repeated IncentivizationProgram incentivization_programs = 1;
}

service Query {
  rpc IncentivizationProgram(QueryIncentivizationProgramRequest) returns (QueryIncentivizationProgramResponse){
    option (google.api.http).get = "/nibiru/incentivization/v1/incentivization_program";
  };

  rpc IncentivizationPrograms(QueryIncentivizationProgramsRequest) returns (QueryIncentivizationProgramsResponse) {
    option (google.api.http).get = "/nibiru/incentivization/v1/incentivization_programs";
  }
}

message QueryIncentivizationProgramRequest {
  uint64 id = 1;
}

message QueryIncentivizationProgramResponse {
  IncentivizationProgram incentivization_program = 1;
}

message QueryIncentivizationProgramsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryIncentivizationProgramsResponse {
  repeated IncentivizationProgram incentivization_programs = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}