# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: oracle/v1beta1/tx.proto, oracle/v1beta1/oracle.proto, oracle/v1beta1/query.proto, oracle/v1beta1/genesis.proto, oracle/v1beta1/state.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import timedelta
from typing import List

import betterproto
import grpclib

from .cosmos.base import v1beta1


@dataclass
class MsgAggregateExchangeRatePrevote(betterproto.Message):
    """
    MsgAggregateExchangeRatePrevote represents a message to submit aggregate
    exchange rate prevote.
    """

    hash: str = betterproto.string_field(1)
    feeder: str = betterproto.string_field(2)
    validator: str = betterproto.string_field(3)


@dataclass
class MsgAggregateExchangeRatePrevoteResponse(betterproto.Message):
    """
    MsgAggregateExchangeRatePrevoteResponse defines the
    Msg/AggregateExchangeRatePrevote response type.
    """

    pass


@dataclass
class MsgAggregateExchangeRateVote(betterproto.Message):
    """
    MsgAggregateExchangeRateVote represents a message to submit aggregate
    exchange rate vote.
    """

    salt: str = betterproto.string_field(1)
    exchange_rates: str = betterproto.string_field(2)
    feeder: str = betterproto.string_field(3)
    validator: str = betterproto.string_field(4)


@dataclass
class MsgAggregateExchangeRateVoteResponse(betterproto.Message):
    """
    MsgAggregateExchangeRateVoteResponse defines the
    Msg/AggregateExchangeRateVote response type.
    """

    pass


@dataclass
class MsgDelegateFeedConsent(betterproto.Message):
    """
    MsgDelegateFeedConsent represents a message to delegate oracle voting
    rights to another address.
    """

    operator: str = betterproto.string_field(1)
    delegate: str = betterproto.string_field(2)


@dataclass
class MsgDelegateFeedConsentResponse(betterproto.Message):
    """
    MsgDelegateFeedConsentResponse defines the Msg/DelegateFeedConsent response
    type.
    """

    pass


@dataclass
class Params(betterproto.Message):
    """Params defines the parameters for the oracle module."""

    vote_period: int = betterproto.uint64_field(1)
    vote_threshold: str = betterproto.string_field(2)
    reward_band: str = betterproto.string_field(3)
    whitelist: List[str] = betterproto.string_field(4)
    slash_fraction: str = betterproto.string_field(5)
    slash_window: int = betterproto.uint64_field(6)
    min_valid_per_window: str = betterproto.string_field(7)
    # amount of time to look back for TWAP calculations
    twap_lookback_window: timedelta = betterproto.message_field(8)


@dataclass
class AggregateExchangeRatePrevote(betterproto.Message):
    """
    struct for aggregate prevoting on the ExchangeRateVote. The purpose of
    aggregate prevote is to hide vote exchange rates with hash which is
    formatted as hex string in SHA256("{salt}:({pair},{exchange_rate})|...|({pa
    ir},{exchange_rate}):{voter}")
    """

    hash: str = betterproto.string_field(1)
    voter: str = betterproto.string_field(2)
    submit_block: int = betterproto.uint64_field(3)


@dataclass
class AggregateExchangeRateVote(betterproto.Message):
    """
    MsgAggregateExchangeRateVote - struct for voting on the exchange rates
    different assets.
    """

    exchange_rate_tuples: List["ExchangeRateTuple"] = betterproto.message_field(1)
    voter: str = betterproto.string_field(2)


@dataclass
class ExchangeRateTuple(betterproto.Message):
    """
    ExchangeRateTuple - struct to store interpreted exchange rates data to
    store
    """

    pair: str = betterproto.string_field(1)
    exchange_rate: str = betterproto.string_field(2)


@dataclass
class PairReward(betterproto.Message):
    """
    PairReward defines a credit object towards validators which provide prices
    faithfully for different pairs.
    """

    # pair defines the pair for which we incentivize validator to provide prices
    # for.
    pair: str = betterproto.string_field(1)
    # id uniquely identifies the rewards instance of the pair
    id: int = betterproto.uint64_field(2)
    # vote_periods defines the vote periods left in which rewards will be
    # distributed.
    vote_periods: int = betterproto.uint64_field(3)
    # coins defines the amount of coins to distribute in a single vote period.
    coins: List[v1beta1.Coin] = betterproto.message_field(4)


@dataclass
class QueryExchangeRateRequest(betterproto.Message):
    """
    QueryExchangeRateRequest is the request type for the Query/ExchangeRate RPC
    method.
    """

    # pair defines the pair to query for.
    pair: str = betterproto.string_field(1)


@dataclass
class QueryExchangeRateResponse(betterproto.Message):
    """
    QueryExchangeRateResponse is response type for the Query/ExchangeRate RPC
    method.
    """

    # exchange_rate defines the exchange rate of assets voted by validators
    exchange_rate: str = betterproto.string_field(1)


@dataclass
class QueryExchangeRatesRequest(betterproto.Message):
    """
    QueryExchangeRatesRequest is the request type for the Query/ExchangeRates
    RPC method.
    """

    pass


@dataclass
class QueryExchangeRatesResponse(betterproto.Message):
    """
    QueryExchangeRatesResponse is response type for the Query/ExchangeRates RPC
    method.
    """

    # exchange_rates defines a list of the exchange rate for all whitelisted
    # pairs.
    exchange_rates: List["ExchangeRateTuple"] = betterproto.message_field(1)


@dataclass
class QueryActivesRequest(betterproto.Message):
    """
    QueryActivesRequest is the request type for the Query/Actives RPC method.
    """

    pass


@dataclass
class QueryActivesResponse(betterproto.Message):
    """
    QueryActivesResponse is response type for the Query/Actives RPC method.
    """

    # actives defines a list of the pair which oracle prices agreed upon.
    actives: List[str] = betterproto.string_field(1)


@dataclass
class QueryVoteTargetsRequest(betterproto.Message):
    """
    QueryVoteTargetsRequest is the request type for the Query/VoteTargets RPC
    method.
    """

    pass


@dataclass
class QueryVoteTargetsResponse(betterproto.Message):
    """
    QueryVoteTargetsResponse is response type for the Query/VoteTargets RPC
    method.
    """

    # vote_targets defines a list of the pairs in which everyone should vote in
    # the current vote period.
    vote_targets: List[str] = betterproto.string_field(1)


@dataclass
class QueryFeederDelegationRequest(betterproto.Message):
    """
    QueryFeederDelegationRequest is the request type for the
    Query/FeederDelegation RPC method.
    """

    # validator defines the validator address to query for.
    validator_addr: str = betterproto.string_field(1)


@dataclass
class QueryFeederDelegationResponse(betterproto.Message):
    """
    QueryFeederDelegationResponse is response type for the
    Query/FeederDelegation RPC method.
    """

    # feeder_addr defines the feeder delegation of a validator
    feeder_addr: str = betterproto.string_field(1)


@dataclass
class QueryMissCounterRequest(betterproto.Message):
    """
    QueryMissCounterRequest is the request type for the Query/MissCounter RPC
    method.
    """

    # validator defines the validator address to query for.
    validator_addr: str = betterproto.string_field(1)


@dataclass
class QueryMissCounterResponse(betterproto.Message):
    """
    QueryMissCounterResponse is response type for the Query/MissCounter RPC
    method.
    """

    # miss_counter defines the oracle miss counter of a validator
    miss_counter: int = betterproto.uint64_field(1)


@dataclass
class QueryAggregatePrevoteRequest(betterproto.Message):
    """
    QueryAggregatePrevoteRequest is the request type for the
    Query/AggregatePrevote RPC method.
    """

    # validator defines the validator address to query for.
    validator_addr: str = betterproto.string_field(1)


@dataclass
class QueryAggregatePrevoteResponse(betterproto.Message):
    """
    QueryAggregatePrevoteResponse is response type for the
    Query/AggregatePrevote RPC method.
    """

    # aggregate_prevote defines oracle aggregate prevote submitted by a validator
    # in the current vote period
    aggregate_prevote: "AggregateExchangeRatePrevote" = betterproto.message_field(1)


@dataclass
class QueryAggregatePrevotesRequest(betterproto.Message):
    """
    QueryAggregatePrevotesRequest is the request type for the
    Query/AggregatePrevotes RPC method.
    """

    pass


@dataclass
class QueryAggregatePrevotesResponse(betterproto.Message):
    """
    QueryAggregatePrevotesResponse is response type for the
    Query/AggregatePrevotes RPC method.
    """

    # aggregate_prevotes defines all oracle aggregate prevotes submitted in the
    # current vote period
    aggregate_prevotes: List[
        "AggregateExchangeRatePrevote"
    ] = betterproto.message_field(1)


@dataclass
class QueryAggregateVoteRequest(betterproto.Message):
    """
    QueryAggregateVoteRequest is the request type for the Query/AggregateVote
    RPC method.
    """

    # validator defines the validator address to query for.
    validator_addr: str = betterproto.string_field(1)


@dataclass
class QueryAggregateVoteResponse(betterproto.Message):
    """
    QueryAggregateVoteResponse is response type for the Query/AggregateVote RPC
    method.
    """

    # aggregate_vote defines oracle aggregate vote submitted by a validator in
    # the current vote period
    aggregate_vote: "AggregateExchangeRateVote" = betterproto.message_field(1)


@dataclass
class QueryAggregateVotesRequest(betterproto.Message):
    """
    QueryAggregateVotesRequest is the request type for the Query/AggregateVotes
    RPC method.
    """

    pass


@dataclass
class QueryAggregateVotesResponse(betterproto.Message):
    """
    QueryAggregateVotesResponse is response type for the Query/AggregateVotes
    RPC method.
    """

    # aggregate_votes defines all oracle aggregate votes submitted in the current
    # vote period
    aggregate_votes: List["AggregateExchangeRateVote"] = betterproto.message_field(1)


@dataclass
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    # params defines the parameters of the module.
    params: "Params" = betterproto.message_field(1)


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the oracle module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    feeder_delegations: List["FeederDelegation"] = betterproto.message_field(2)
    exchange_rates: List["ExchangeRateTuple"] = betterproto.message_field(3)
    miss_counters: List["MissCounter"] = betterproto.message_field(4)
    aggregate_exchange_rate_prevotes: List[
        "AggregateExchangeRatePrevote"
    ] = betterproto.message_field(5)
    aggregate_exchange_rate_votes: List[
        "AggregateExchangeRateVote"
    ] = betterproto.message_field(6)
    pairs: List[str] = betterproto.string_field(7)
    pair_rewards: List["PairReward"] = betterproto.message_field(8)


@dataclass
class FeederDelegation(betterproto.Message):
    """
    FeederDelegation is the address for where oracle feeder authority are
    delegated to. By default this struct is only used at genesis to feed in
    default feeder addresses.
    """

    feeder_address: str = betterproto.string_field(1)
    validator_address: str = betterproto.string_field(2)


@dataclass
class MissCounter(betterproto.Message):
    """
    MissCounter defines an miss counter and validator address pair used in
    oracle module's genesis state
    """

    validator_address: str = betterproto.string_field(1)
    miss_counter: int = betterproto.uint64_field(2)


@dataclass
class PriceSnapshot(betterproto.Message):
    """a snapshot of the prices at a given point in time"""

    pair: str = betterproto.string_field(1)
    price: str = betterproto.string_field(2)
    # milliseconds since unix epoch
    timestamp_ms: int = betterproto.int64_field(3)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the oracle Msg service."""

    async def aggregate_exchange_rate_prevote(
        self, *, hash: str = "", feeder: str = "", validator: str = ""
    ) -> MsgAggregateExchangeRatePrevoteResponse:
        """
        AggregateExchangeRatePrevote defines a method for submitting aggregate
        exchange rate prevote
        """

        request = MsgAggregateExchangeRatePrevote()
        request.hash = hash
        request.feeder = feeder
        request.validator = validator

        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Msg/AggregateExchangeRatePrevote",
            request,
            MsgAggregateExchangeRatePrevoteResponse,
        )

    async def aggregate_exchange_rate_vote(
        self,
        *,
        salt: str = "",
        exchange_rates: str = "",
        feeder: str = "",
        validator: str = "",
    ) -> MsgAggregateExchangeRateVoteResponse:
        """
        AggregateExchangeRateVote defines a method for submitting aggregate
        exchange rate vote
        """

        request = MsgAggregateExchangeRateVote()
        request.salt = salt
        request.exchange_rates = exchange_rates
        request.feeder = feeder
        request.validator = validator

        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Msg/AggregateExchangeRateVote",
            request,
            MsgAggregateExchangeRateVoteResponse,
        )

    async def delegate_feed_consent(
        self, *, operator: str = "", delegate: str = ""
    ) -> MsgDelegateFeedConsentResponse:
        """
        DelegateFeedConsent defines a method for setting the feeder delegation
        """

        request = MsgDelegateFeedConsent()
        request.operator = operator
        request.delegate = delegate

        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Msg/DelegateFeedConsent",
            request,
            MsgDelegateFeedConsentResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC querier service."""

    async def exchange_rate(self, *, pair: str = "") -> QueryExchangeRateResponse:
        """ExchangeRate returns exchange rate of a pair"""

        request = QueryExchangeRateRequest()
        request.pair = pair

        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/ExchangeRate",
            request,
            QueryExchangeRateResponse,
        )

    async def exchange_rate_twap(self, *, pair: str = "") -> QueryExchangeRateResponse:
        """ExchangeRateTwap returns exchange rate of a pair"""

        request = QueryExchangeRateRequest()
        request.pair = pair

        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/ExchangeRateTwap",
            request,
            QueryExchangeRateResponse,
        )

    async def exchange_rates(self) -> QueryExchangeRatesResponse:
        """ExchangeRates returns exchange rates of all pairs"""

        request = QueryExchangeRatesRequest()

        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/ExchangeRates",
            request,
            QueryExchangeRatesResponse,
        )

    async def actives(self) -> QueryActivesResponse:
        """Actives returns all active pairs"""

        request = QueryActivesRequest()

        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/Actives",
            request,
            QueryActivesResponse,
        )

    async def vote_targets(self) -> QueryVoteTargetsResponse:
        """VoteTargets returns all vote target for pairs"""

        request = QueryVoteTargetsRequest()

        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/VoteTargets",
            request,
            QueryVoteTargetsResponse,
        )

    async def feeder_delegation(
        self, *, validator_addr: str = ""
    ) -> QueryFeederDelegationResponse:
        """FeederDelegation returns feeder delegation of a validator"""

        request = QueryFeederDelegationRequest()
        request.validator_addr = validator_addr

        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/FeederDelegation",
            request,
            QueryFeederDelegationResponse,
        )

    async def miss_counter(
        self, *, validator_addr: str = ""
    ) -> QueryMissCounterResponse:
        """MissCounter returns oracle miss counter of a validator"""

        request = QueryMissCounterRequest()
        request.validator_addr = validator_addr

        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/MissCounter",
            request,
            QueryMissCounterResponse,
        )

    async def aggregate_prevote(
        self, *, validator_addr: str = ""
    ) -> QueryAggregatePrevoteResponse:
        """AggregatePrevote returns an aggregate prevote of a validator"""

        request = QueryAggregatePrevoteRequest()
        request.validator_addr = validator_addr

        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/AggregatePrevote",
            request,
            QueryAggregatePrevoteResponse,
        )

    async def aggregate_prevotes(self) -> QueryAggregatePrevotesResponse:
        """AggregatePrevotes returns aggregate prevotes of all validators"""

        request = QueryAggregatePrevotesRequest()

        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/AggregatePrevotes",
            request,
            QueryAggregatePrevotesResponse,
        )

    async def aggregate_vote(
        self, *, validator_addr: str = ""
    ) -> QueryAggregateVoteResponse:
        """AggregateVote returns an aggregate vote of a validator"""

        request = QueryAggregateVoteRequest()
        request.validator_addr = validator_addr

        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/AggregateVote",
            request,
            QueryAggregateVoteResponse,
        )

    async def aggregate_votes(self) -> QueryAggregateVotesResponse:
        """AggregateVotes returns aggregate votes of all validators"""

        request = QueryAggregateVotesRequest()

        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/AggregateVotes",
            request,
            QueryAggregateVotesResponse,
        )

    async def params(self) -> QueryParamsResponse:
        """Params queries all parameters."""

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/Params",
            request,
            QueryParamsResponse,
        )
