# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: epochs/state.proto, epochs/query.proto, epochs/genesis.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import List

import betterproto
import grpclib


@dataclass
class EpochInfo(betterproto.Message):
    # A string identifier for the epoch. e.g. "15min" or "1hour"
    identifier: str = betterproto.string_field(1)
    # When the epoch repetitino should start.
    start_time: datetime = betterproto.message_field(2)
    # How long each epoch lasts for.
    duration: timedelta = betterproto.message_field(3)
    # The current epoch number, starting from 1.
    current_epoch: int = betterproto.uint64_field(4)
    # The start timestamp of the current epoch.
    current_epoch_start_time: datetime = betterproto.message_field(5)
    # Whether or not this epoch has started. Set to true if current blocktime >=
    # start_time.
    epoch_counting_started: bool = betterproto.bool_field(6)
    # The block height at which the current epoch started at.
    current_epoch_start_height: int = betterproto.int64_field(7)


@dataclass
class QueryEpochsInfoRequest(betterproto.Message):
    pass


@dataclass
class QueryEpochsInfoResponse(betterproto.Message):
    epochs: List["EpochInfo"] = betterproto.message_field(1)


@dataclass
class QueryCurrentEpochRequest(betterproto.Message):
    identifier: str = betterproto.string_field(1)


@dataclass
class QueryCurrentEpochResponse(betterproto.Message):
    current_epoch: int = betterproto.uint64_field(1)


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the epochs module's genesis state."""

    epochs: List["EpochInfo"] = betterproto.message_field(1)


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC querier service."""

    async def epoch_infos(self) -> QueryEpochsInfoResponse:
        """EpochInfos provide running epochInfos"""

        request = QueryEpochsInfoRequest()

        return await self._unary_unary(
            "/nibiru.epochs.v1beta1.Query/EpochInfos",
            request,
            QueryEpochsInfoResponse,
        )

    async def current_epoch(self, *, identifier: str = "") -> QueryCurrentEpochResponse:
        """CurrentEpoch provide current epoch of specified identifier"""

        request = QueryCurrentEpochRequest()
        request.identifier = identifier

        return await self._unary_unary(
            "/nibiru.epochs.v1beta1.Query/CurrentEpoch",
            request,
            QueryCurrentEpochResponse,
        )
