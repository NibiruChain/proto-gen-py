# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: vpool/v1/state.proto, vpool/v1/gov.proto, vpool/v1/query.proto, vpool/v1/event.proto, vpool/v1/genesis.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import List

import betterproto
import grpclib

from .nibiru import common


class Direction(betterproto.Enum):
    DIRECTION_UNSPECIFIED = 0
    ADD_TO_POOL = 1
    REMOVE_FROM_POOL = 2


class TwapCalcOption(betterproto.Enum):
    """Enumerates different options of calculating twap."""

    TWAP_CALC_OPTION_UNSPECIFIED = 0
    # Spot price from quote asset reserve / base asset reserve
    SPOT = 1
    # Swapping with quote assets, output denominated in base assets
    QUOTE_ASSET_SWAP = 2
    # Swapping with base assets, output denominated in quote assets
    BASE_ASSET_SWAP = 3


@dataclass
class Vpool(betterproto.Message):
    """
    A virtual pool used only for price discovery of perpetual futures
    contracts. No real liquidity exists in this pool.
    """

    # always BASE:QUOTE, e.g. BTC:NUSD or ETH:NUSD
    pair: common.AssetPair = betterproto.message_field(1)
    # base asset is the crypto asset, e.g. BTC or ETH
    base_asset_reserve: str = betterproto.string_field(2)
    # quote asset is usually stablecoin, in our case NUSD
    quote_asset_reserve: str = betterproto.string_field(3)
    config: "VpoolConfig" = betterproto.message_field(4)


@dataclass
class VpoolConfig(betterproto.Message):
    # ratio applied to reserves in order not to over trade
    trade_limit_ratio: str = betterproto.string_field(1)
    # percentage that a single open or close position can alter the reserve
    # amounts
    fluctuation_limit_ratio: str = betterproto.string_field(2)
    # max_oracle_spread_ratio
    max_oracle_spread_ratio: str = betterproto.string_field(3)
    # maintenance_margin_ratio
    maintenance_margin_ratio: str = betterproto.string_field(4)
    # max_leverage
    max_leverage: str = betterproto.string_field(5)


@dataclass
class CurrentTWAP(betterproto.Message):
    """
    CurrentTWAP states defines the numerator and denominator for the TWAP
    calculation
    """

    pair_id: str = betterproto.string_field(1)
    numerator: str = betterproto.string_field(2)
    denominator: str = betterproto.string_field(3)
    price: str = betterproto.string_field(4)


@dataclass
class ReserveSnapshot(betterproto.Message):
    """a snapshot of the vpool's reserves at a given point in time"""

    pair: common.AssetPair = betterproto.message_field(5)
    base_asset_reserve: str = betterproto.string_field(1)
    # quote asset is usually the margin asset, e.g. NUSD
    quote_asset_reserve: str = betterproto.string_field(2)
    # milliseconds since unix epoch
    timestamp_ms: int = betterproto.int64_field(3)


@dataclass
class PoolPrices(betterproto.Message):
    """
    PoolPrices is a simple structure that displays a snapshot of the mark and
    index prices for an asset. Empty strings for the indexPrice or twapMark
    fields  indicate that the price is currently unavailable.
    """

    # Pair identifier for the two assets. Always in format 'base:quote'
    pair: str = betterproto.string_field(9)
    # MarkPrice is the instantaneous price of the perp.  Equivalent to
    # quoteAssetReserve / baseAssetReserve.
    mark_price: str = betterproto.string_field(10)
    # IndexPrice is the price of the "underlying" for the perp
    index_price: str = betterproto.string_field(11)
    # TwapMark is the time-weighted average (mark) price.
    twap_mark: str = betterproto.string_field(12)
    # SwapInvariant is the product of the reserves, commonly referred to as "k".
    swap_invariant: str = betterproto.string_field(13)
    # The block number corresponding to each price
    block_number: int = betterproto.int64_field(14)


@dataclass
class CreatePoolProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    # pair represents the pair of the vpool.
    pair: str = betterproto.string_field(3)
    # quote_asset_reserve is the amount of quote asset the pool will be
    # initialized with.
    quote_asset_reserve: str = betterproto.string_field(5)
    # base_asset_reserve is the amount of base asset the pool will be initialized
    # with.
    base_asset_reserve: str = betterproto.string_field(6)
    config: "VpoolConfig" = betterproto.message_field(7)


@dataclass
class EditPoolConfigProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    pair: str = betterproto.string_field(3)
    config: "VpoolConfig" = betterproto.message_field(4)


@dataclass
class EditSwapInvariantsProposal(betterproto.Message):
    """
    EditSwapInvariantsProposal is a governance proposal to change the swap
    invariant of the virtual pool for one or more trading pairs.
    """

    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    # Map from pair ID to a multiple on the swap invariant. For example, a
    # proposal containing  "swap_invariant_maps": [{ "uatom:unusd": "5" }, {
    # "uosmo:unusd": "0.9" }] would mutliply the swap invariant of the ATOM and
    # OSMO trading pairs by  5 and 0.9 respectively. The price at which k changes
    # is the instantaneous  mark price at the time of the proposal's execution.
    swap_invariant_maps: List[
        "EditSwapInvariantsProposalSwapInvariantMultiple"
    ] = betterproto.message_field(5)


@dataclass
class EditSwapInvariantsProposalSwapInvariantMultiple(betterproto.Message):
    """
    A map between a trading pair and a desired multiplier for its swap
    invariant.
    """

    # Pair is a string identifier for an asset pair.
    pair: str = betterproto.string_field(3)
    # Multiplier is a number representing the desired percentage change to the
    # swap invariant of the AMM pool underlying 'pair'
    multiplier: str = betterproto.string_field(4)


@dataclass
class QueryReserveAssetsRequest(betterproto.Message):
    # always BASE:QUOTE, e.g. BTC:NUSD or ETH:NUSD
    pair: str = betterproto.string_field(1)


@dataclass
class QueryReserveAssetsResponse(betterproto.Message):
    # base asset is the crypto asset, e.g. BTC or ETH
    base_asset_reserve: str = betterproto.string_field(1)
    # quote asset is usually stablecoin, in our case NUSD
    quote_asset_reserve: str = betterproto.string_field(2)


@dataclass
class QueryAllPoolsRequest(betterproto.Message):
    pass


@dataclass
class QueryAllPoolsResponse(betterproto.Message):
    pools: List["Vpool"] = betterproto.message_field(1)
    prices: List["PoolPrices"] = betterproto.message_field(2)


@dataclass
class QueryBaseAssetPriceRequest(betterproto.Message):
    pair: str = betterproto.string_field(1)
    direction: "Direction" = betterproto.enum_field(2)
    # base asset is the crypto asset, e.g. BTC or ETH
    base_asset_amount: str = betterproto.string_field(3)


@dataclass
class QueryBaseAssetPriceResponse(betterproto.Message):
    price_in_quote_denom: str = betterproto.string_field(1)


@dataclass
class ReserveSnapshotSavedEvent(betterproto.Message):
    pair: str = betterproto.string_field(1)
    quote_reserve: str = betterproto.string_field(2)
    base_reserve: str = betterproto.string_field(3)
    # MarkPrice at the end of the block.  (instantaneous) markPrice :=
    # quoteReserve / baseReserve
    mark_price: str = betterproto.string_field(4)
    block_height: int = betterproto.int64_field(5)
    block_timestamp: datetime = betterproto.message_field(6)


@dataclass
class SwapOnVpoolEvent(betterproto.Message):
    """
    A swap on the vpool represented by 'pair'.  Amounts are negative or
    positive base on the perspective of the pool, i.e. a negative quote means
    the trader has gained quote and the vpool lost quote.
    """

    pair: str = betterproto.string_field(1)
    # delta in the quote reserves of the vpool
    quote_amount: str = betterproto.string_field(2)
    # delta in the base reserves of the vpool
    base_amount: str = betterproto.string_field(3)


@dataclass
class MarkPriceChangedEvent(betterproto.Message):
    pair: str = betterproto.string_field(1)
    price: str = betterproto.string_field(2)
    block_timestamp: datetime = betterproto.message_field(3)


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the vpool module's genesis state."""

    vpools: List["Vpool"] = betterproto.message_field(1)


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC querier service."""

    async def reserve_assets(self, *, pair: str = "") -> QueryReserveAssetsResponse:
        """
        Queries the reserve assets in a given pool, identified by a token pair.
        """

        request = QueryReserveAssetsRequest()
        request.pair = pair

        return await self._unary_unary(
            "/nibiru.vpool.v1.Query/ReserveAssets",
            request,
            QueryReserveAssetsResponse,
        )

    async def all_pools(self) -> QueryAllPoolsResponse:
        """Queries all virtual pools."""

        request = QueryAllPoolsRequest()

        return await self._unary_unary(
            "/nibiru.vpool.v1.Query/AllPools",
            request,
            QueryAllPoolsResponse,
        )

    async def base_asset_price(
        self, *, pair: str = "", direction: "Direction" = 0, base_asset_amount: str = ""
    ) -> QueryBaseAssetPriceResponse:
        """Queries prices"""

        request = QueryBaseAssetPriceRequest()
        request.pair = pair
        request.direction = direction
        request.base_asset_amount = base_asset_amount

        return await self._unary_unary(
            "/nibiru.vpool.v1.Query/BaseAssetPrice",
            request,
            QueryBaseAssetPriceResponse,
        )
