"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc
import inflation.v1.query_pb2

class QueryStub:
    """Query provides defines the gRPC querier service."""

    def __init__(self, channel: grpc.Channel) -> None: ...
    Period: grpc.UnaryUnaryMultiCallable[
        inflation.v1.query_pb2.QueryPeriodRequest,
        inflation.v1.query_pb2.QueryPeriodResponse,
    ]
    """Period retrieves current period."""
    EpochMintProvision: grpc.UnaryUnaryMultiCallable[
        inflation.v1.query_pb2.QueryEpochMintProvisionRequest,
        inflation.v1.query_pb2.QueryEpochMintProvisionResponse,
    ]
    """EpochMintProvision retrieves current minting epoch provision value."""
    SkippedEpochs: grpc.UnaryUnaryMultiCallable[
        inflation.v1.query_pb2.QuerySkippedEpochsRequest,
        inflation.v1.query_pb2.QuerySkippedEpochsResponse,
    ]
    """SkippedEpochs retrieves the total number of skipped epochs."""
    CirculatingSupply: grpc.UnaryUnaryMultiCallable[
        inflation.v1.query_pb2.QueryCirculatingSupplyRequest,
        inflation.v1.query_pb2.QueryCirculatingSupplyResponse,
    ]
    """CirculatingSupply retrieves the total number of tokens that are in
    circulation (i.e. excluding unvested tokens).
    """
    InflationRate: grpc.UnaryUnaryMultiCallable[
        inflation.v1.query_pb2.QueryInflationRateRequest,
        inflation.v1.query_pb2.QueryInflationRateResponse,
    ]
    """InflationRate retrieves the inflation rate of the current period."""
    Params: grpc.UnaryUnaryMultiCallable[
        inflation.v1.query_pb2.QueryParamsRequest,
        inflation.v1.query_pb2.QueryParamsResponse,
    ]
    """Params retrieves the total set of minting parameters."""

class QueryServicer(metaclass=abc.ABCMeta):
    """Query provides defines the gRPC querier service."""

    @abc.abstractmethod
    def Period(
        self,
        request: inflation.v1.query_pb2.QueryPeriodRequest,
        context: grpc.ServicerContext,
    ) -> inflation.v1.query_pb2.QueryPeriodResponse:
        """Period retrieves current period."""
    @abc.abstractmethod
    def EpochMintProvision(
        self,
        request: inflation.v1.query_pb2.QueryEpochMintProvisionRequest,
        context: grpc.ServicerContext,
    ) -> inflation.v1.query_pb2.QueryEpochMintProvisionResponse:
        """EpochMintProvision retrieves current minting epoch provision value."""
    @abc.abstractmethod
    def SkippedEpochs(
        self,
        request: inflation.v1.query_pb2.QuerySkippedEpochsRequest,
        context: grpc.ServicerContext,
    ) -> inflation.v1.query_pb2.QuerySkippedEpochsResponse:
        """SkippedEpochs retrieves the total number of skipped epochs."""
    @abc.abstractmethod
    def CirculatingSupply(
        self,
        request: inflation.v1.query_pb2.QueryCirculatingSupplyRequest,
        context: grpc.ServicerContext,
    ) -> inflation.v1.query_pb2.QueryCirculatingSupplyResponse:
        """CirculatingSupply retrieves the total number of tokens that are in
        circulation (i.e. excluding unvested tokens).
        """
    @abc.abstractmethod
    def InflationRate(
        self,
        request: inflation.v1.query_pb2.QueryInflationRateRequest,
        context: grpc.ServicerContext,
    ) -> inflation.v1.query_pb2.QueryInflationRateResponse:
        """InflationRate retrieves the inflation rate of the current period."""
    @abc.abstractmethod
    def Params(
        self,
        request: inflation.v1.query_pb2.QueryParamsRequest,
        context: grpc.ServicerContext,
    ) -> inflation.v1.query_pb2.QueryParamsResponse:
        """Params retrieves the total set of minting parameters."""

def add_QueryServicer_to_server(servicer: QueryServicer, server: grpc.Server) -> None: ...
