"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Minter(google.protobuf.message.Message):
    """Minter represents the minting state."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INFLATION_FIELD_NUMBER: builtins.int
    ANNUAL_PROVISIONS_FIELD_NUMBER: builtins.int
    inflation: builtins.str
    """current annual inflation rate"""
    annual_provisions: builtins.str
    """current annual expected provisions"""
    def __init__(
        self,
        *,
        inflation: builtins.str = ...,
        annual_provisions: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["annual_provisions", b"annual_provisions", "inflation", b"inflation"]) -> None: ...

global___Minter = Minter

@typing_extensions.final
class Params(google.protobuf.message.Message):
    """Params holds parameters for the mint module."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MINT_DENOM_FIELD_NUMBER: builtins.int
    INFLATION_RATE_CHANGE_FIELD_NUMBER: builtins.int
    INFLATION_MAX_FIELD_NUMBER: builtins.int
    INFLATION_MIN_FIELD_NUMBER: builtins.int
    GOAL_BONDED_FIELD_NUMBER: builtins.int
    BLOCKS_PER_YEAR_FIELD_NUMBER: builtins.int
    mint_denom: builtins.str
    """type of coin to mint"""
    inflation_rate_change: builtins.str
    """maximum annual change in inflation rate"""
    inflation_max: builtins.str
    """maximum inflation rate"""
    inflation_min: builtins.str
    """minimum inflation rate"""
    goal_bonded: builtins.str
    """goal of percent bonded atoms"""
    blocks_per_year: builtins.int
    """expected blocks per year"""
    def __init__(
        self,
        *,
        mint_denom: builtins.str = ...,
        inflation_rate_change: builtins.str = ...,
        inflation_max: builtins.str = ...,
        inflation_min: builtins.str = ...,
        goal_bonded: builtins.str = ...,
        blocks_per_year: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["blocks_per_year", b"blocks_per_year", "goal_bonded", b"goal_bonded", "inflation_max", b"inflation_max", "inflation_min", b"inflation_min", "inflation_rate_change", b"inflation_rate_change", "mint_denom", b"mint_denom"]) -> None: ...

global___Params = Params
