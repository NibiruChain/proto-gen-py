"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Minter(google.protobuf.message.Message):
    """Minter represents the minting state."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    INFLATION_FIELD_NUMBER: builtins.int
    ANNUAL_PROVISIONS_FIELD_NUMBER: builtins.int
    inflation: typing.Text
    """current annual inflation rate"""

    annual_provisions: typing.Text
    """current annual expected provisions"""

    def __init__(self,
        *,
        inflation: typing.Text = ...,
        annual_provisions: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["annual_provisions",b"annual_provisions","inflation",b"inflation"]) -> None: ...
global___Minter = Minter

class Params(google.protobuf.message.Message):
    """Params holds parameters for the mint module."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    MINT_DENOM_FIELD_NUMBER: builtins.int
    INFLATION_RATE_CHANGE_FIELD_NUMBER: builtins.int
    INFLATION_MAX_FIELD_NUMBER: builtins.int
    INFLATION_MIN_FIELD_NUMBER: builtins.int
    GOAL_BONDED_FIELD_NUMBER: builtins.int
    BLOCKS_PER_YEAR_FIELD_NUMBER: builtins.int
    mint_denom: typing.Text
    """type of coin to mint"""

    inflation_rate_change: typing.Text
    """maximum annual change in inflation rate"""

    inflation_max: typing.Text
    """maximum inflation rate"""

    inflation_min: typing.Text
    """minimum inflation rate"""

    goal_bonded: typing.Text
    """goal of percent bonded atoms"""

    blocks_per_year: builtins.int
    """expected blocks per year"""

    def __init__(self,
        *,
        mint_denom: typing.Text = ...,
        inflation_rate_change: typing.Text = ...,
        inflation_max: typing.Text = ...,
        inflation_min: typing.Text = ...,
        goal_bonded: typing.Text = ...,
        blocks_per_year: builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["blocks_per_year",b"blocks_per_year","goal_bonded",b"goal_bonded","inflation_max",b"inflation_max","inflation_min",b"inflation_min","inflation_rate_change",b"inflation_rate_change","mint_denom",b"mint_denom"]) -> None: ...
global___Params = Params
