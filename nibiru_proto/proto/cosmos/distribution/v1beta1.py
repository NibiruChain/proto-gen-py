# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/distribution/v1beta1/tx.proto, cosmos/distribution/v1beta1/distribution.proto, cosmos/distribution/v1beta1/query.proto, cosmos/distribution/v1beta1/genesis.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib

from .cosmos.base import v1beta1
from .cosmos.base.query import v1beta1


@dataclass
class MsgSetWithdrawAddress(betterproto.Message):
    """
    MsgSetWithdrawAddress sets the withdraw address for a delegator (or
    validator self-delegation).
    """

    delegator_address: str = betterproto.string_field(1)
    withdraw_address: str = betterproto.string_field(2)


@dataclass
class MsgSetWithdrawAddressResponse(betterproto.Message):
    """
    MsgSetWithdrawAddressResponse defines the Msg/SetWithdrawAddress response
    type.
    """

    pass


@dataclass
class MsgWithdrawDelegatorReward(betterproto.Message):
    """
    MsgWithdrawDelegatorReward represents delegation withdrawal to a delegator
    from a single validator.
    """

    delegator_address: str = betterproto.string_field(1)
    validator_address: str = betterproto.string_field(2)


@dataclass
class MsgWithdrawDelegatorRewardResponse(betterproto.Message):
    """
    MsgWithdrawDelegatorRewardResponse defines the Msg/WithdrawDelegatorReward
    response type.
    """

    pass


@dataclass
class MsgWithdrawValidatorCommission(betterproto.Message):
    """
    MsgWithdrawValidatorCommission withdraws the full commission to the
    validator address.
    """

    validator_address: str = betterproto.string_field(1)


@dataclass
class MsgWithdrawValidatorCommissionResponse(betterproto.Message):
    """
    MsgWithdrawValidatorCommissionResponse defines the
    Msg/WithdrawValidatorCommission response type.
    """

    pass


@dataclass
class MsgFundCommunityPool(betterproto.Message):
    """
    MsgFundCommunityPool allows an account to directly fund the community pool.
    """

    amount: List[v1beta1.Coin] = betterproto.message_field(1)
    depositor: str = betterproto.string_field(2)


@dataclass
class MsgFundCommunityPoolResponse(betterproto.Message):
    """
    MsgFundCommunityPoolResponse defines the Msg/FundCommunityPool response
    type.
    """

    pass


@dataclass
class Params(betterproto.Message):
    """Params defines the set of params for the distribution module."""

    community_tax: str = betterproto.string_field(1)
    base_proposer_reward: str = betterproto.string_field(2)
    bonus_proposer_reward: str = betterproto.string_field(3)
    withdraw_addr_enabled: bool = betterproto.bool_field(4)


@dataclass
class ValidatorHistoricalRewards(betterproto.Message):
    """
    ValidatorHistoricalRewards represents historical rewards for a validator.
    Height is implicit within the store key. Cumulative reward ratio is the sum
    from the zeroeth period until this period of rewards / tokens, per the
    spec. The reference count indicates the number of objects which might need
    to reference this historical entry at any point. ReferenceCount =    number
    of outstanding delegations which ended the associated period (and    might
    need to read that record)  + number of slashes which ended the associated
    period (and might need to  read that record)  + one per validator for the
    zeroeth period, set on initialization
    """

    cumulative_reward_ratio: List[v1beta1.DecCoin] = betterproto.message_field(1)
    reference_count: int = betterproto.uint32_field(2)


@dataclass
class ValidatorCurrentRewards(betterproto.Message):
    """
    ValidatorCurrentRewards represents current rewards and current period for a
    validator kept as a running counter and incremented each block as long as
    the validator's tokens remain constant.
    """

    rewards: List[v1beta1.DecCoin] = betterproto.message_field(1)
    period: int = betterproto.uint64_field(2)


@dataclass
class ValidatorAccumulatedCommission(betterproto.Message):
    """
    ValidatorAccumulatedCommission represents accumulated commission for a
    validator kept as a running counter, can be withdrawn at any time.
    """

    commission: List[v1beta1.DecCoin] = betterproto.message_field(1)


@dataclass
class ValidatorOutstandingRewards(betterproto.Message):
    """
    ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
    for a validator inexpensive to track, allows simple sanity checks.
    """

    rewards: List[v1beta1.DecCoin] = betterproto.message_field(1)


@dataclass
class ValidatorSlashEvent(betterproto.Message):
    """
    ValidatorSlashEvent represents a validator slash event. Height is implicit
    within the store key. This is needed to calculate appropriate amount of
    staking tokens for delegations which are withdrawn after a slash has
    occurred.
    """

    validator_period: int = betterproto.uint64_field(1)
    fraction: str = betterproto.string_field(2)


@dataclass
class ValidatorSlashEvents(betterproto.Message):
    """
    ValidatorSlashEvents is a collection of ValidatorSlashEvent messages.
    """

    validator_slash_events: List["ValidatorSlashEvent"] = betterproto.message_field(1)


@dataclass
class FeePool(betterproto.Message):
    """FeePool is the global fee pool for distribution."""

    community_pool: List[v1beta1.DecCoin] = betterproto.message_field(1)


@dataclass
class CommunityPoolSpendProposal(betterproto.Message):
    """
    CommunityPoolSpendProposal details a proposal for use of community funds,
    together with how many coins are proposed to be spent, and to which
    recipient account.
    """

    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    recipient: str = betterproto.string_field(3)
    amount: List[v1beta1.Coin] = betterproto.message_field(4)


@dataclass
class DelegatorStartingInfo(betterproto.Message):
    """
    DelegatorStartingInfo represents the starting info for a delegator reward
    period. It tracks the previous validator period, the delegation's amount of
    staking token, and the creation height (to check later on if any slashes
    have occurred). NOTE: Even though validators are slashed to whole staking
    tokens, the delegators within the validator may be left with less than a
    full token, thus sdk.Dec is used.
    """

    previous_period: int = betterproto.uint64_field(1)
    stake: str = betterproto.string_field(2)
    height: int = betterproto.uint64_field(3)


@dataclass
class DelegationDelegatorReward(betterproto.Message):
    """
    DelegationDelegatorReward represents the properties of a delegator's
    delegation reward.
    """

    validator_address: str = betterproto.string_field(1)
    reward: List[v1beta1.DecCoin] = betterproto.message_field(2)


@dataclass
class CommunityPoolSpendProposalWithDeposit(betterproto.Message):
    """
    CommunityPoolSpendProposalWithDeposit defines a CommunityPoolSpendProposal
    with a deposit
    """

    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    recipient: str = betterproto.string_field(3)
    amount: str = betterproto.string_field(4)
    deposit: str = betterproto.string_field(5)


@dataclass
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    # params defines the parameters of the module.
    params: "Params" = betterproto.message_field(1)


@dataclass
class QueryValidatorOutstandingRewardsRequest(betterproto.Message):
    """
    QueryValidatorOutstandingRewardsRequest is the request type for the
    Query/ValidatorOutstandingRewards RPC method.
    """

    # validator_address defines the validator address to query for.
    validator_address: str = betterproto.string_field(1)


@dataclass
class QueryValidatorOutstandingRewardsResponse(betterproto.Message):
    """
    QueryValidatorOutstandingRewardsResponse is the response type for the
    Query/ValidatorOutstandingRewards RPC method.
    """

    rewards: "ValidatorOutstandingRewards" = betterproto.message_field(1)


@dataclass
class QueryValidatorCommissionRequest(betterproto.Message):
    """
    QueryValidatorCommissionRequest is the request type for the
    Query/ValidatorCommission RPC method
    """

    # validator_address defines the validator address to query for.
    validator_address: str = betterproto.string_field(1)


@dataclass
class QueryValidatorCommissionResponse(betterproto.Message):
    """
    QueryValidatorCommissionResponse is the response type for the
    Query/ValidatorCommission RPC method
    """

    # commission defines the commision the validator received.
    commission: "ValidatorAccumulatedCommission" = betterproto.message_field(1)


@dataclass
class QueryValidatorSlashesRequest(betterproto.Message):
    """
    QueryValidatorSlashesRequest is the request type for the
    Query/ValidatorSlashes RPC method
    """

    # validator_address defines the validator address to query for.
    validator_address: str = betterproto.string_field(1)
    # starting_height defines the optional starting height to query the slashes.
    starting_height: int = betterproto.uint64_field(2)
    # starting_height defines the optional ending height to query the slashes.
    ending_height: int = betterproto.uint64_field(3)
    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(4)


@dataclass
class QueryValidatorSlashesResponse(betterproto.Message):
    """
    QueryValidatorSlashesResponse is the response type for the
    Query/ValidatorSlashes RPC method.
    """

    # slashes defines the slashes the validator received.
    slashes: List["ValidatorSlashEvent"] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryDelegationRewardsRequest(betterproto.Message):
    """
    QueryDelegationRewardsRequest is the request type for the
    Query/DelegationRewards RPC method.
    """

    # delegator_address defines the delegator address to query for.
    delegator_address: str = betterproto.string_field(1)
    # validator_address defines the validator address to query for.
    validator_address: str = betterproto.string_field(2)


@dataclass
class QueryDelegationRewardsResponse(betterproto.Message):
    """
    QueryDelegationRewardsResponse is the response type for the
    Query/DelegationRewards RPC method.
    """

    # rewards defines the rewards accrued by a delegation.
    rewards: List[v1beta1.DecCoin] = betterproto.message_field(1)


@dataclass
class QueryDelegationTotalRewardsRequest(betterproto.Message):
    """
    QueryDelegationTotalRewardsRequest is the request type for the
    Query/DelegationTotalRewards RPC method.
    """

    # delegator_address defines the delegator address to query for.
    delegator_address: str = betterproto.string_field(1)


@dataclass
class QueryDelegationTotalRewardsResponse(betterproto.Message):
    """
    QueryDelegationTotalRewardsResponse is the response type for the
    Query/DelegationTotalRewards RPC method.
    """

    # rewards defines all the rewards accrued by a delegator.
    rewards: List["DelegationDelegatorReward"] = betterproto.message_field(1)
    # total defines the sum of all the rewards.
    total: List[v1beta1.DecCoin] = betterproto.message_field(2)


@dataclass
class QueryDelegatorValidatorsRequest(betterproto.Message):
    """
    QueryDelegatorValidatorsRequest is the request type for the
    Query/DelegatorValidators RPC method.
    """

    # delegator_address defines the delegator address to query for.
    delegator_address: str = betterproto.string_field(1)


@dataclass
class QueryDelegatorValidatorsResponse(betterproto.Message):
    """
    QueryDelegatorValidatorsResponse is the response type for the
    Query/DelegatorValidators RPC method.
    """

    # validators defines the validators a delegator is delegating for.
    validators: List[str] = betterproto.string_field(1)


@dataclass
class QueryDelegatorWithdrawAddressRequest(betterproto.Message):
    """
    QueryDelegatorWithdrawAddressRequest is the request type for the
    Query/DelegatorWithdrawAddress RPC method.
    """

    # delegator_address defines the delegator address to query for.
    delegator_address: str = betterproto.string_field(1)


@dataclass
class QueryDelegatorWithdrawAddressResponse(betterproto.Message):
    """
    QueryDelegatorWithdrawAddressResponse is the response type for the
    Query/DelegatorWithdrawAddress RPC method.
    """

    # withdraw_address defines the delegator address to query for.
    withdraw_address: str = betterproto.string_field(1)


@dataclass
class QueryCommunityPoolRequest(betterproto.Message):
    """
    QueryCommunityPoolRequest is the request type for the Query/CommunityPool
    RPC method.
    """

    pass


@dataclass
class QueryCommunityPoolResponse(betterproto.Message):
    """
    QueryCommunityPoolResponse is the response type for the Query/CommunityPool
    RPC method.
    """

    # pool defines community pool's coins.
    pool: List[v1beta1.DecCoin] = betterproto.message_field(1)


@dataclass
class DelegatorWithdrawInfo(betterproto.Message):
    """
    DelegatorWithdrawInfo is the address for where distributions rewards are
    withdrawn to by default this struct is only used at genesis to feed in
    default withdraw addresses.
    """

    # delegator_address is the address of the delegator.
    delegator_address: str = betterproto.string_field(1)
    # withdraw_address is the address to withdraw the delegation rewards to.
    withdraw_address: str = betterproto.string_field(2)


@dataclass
class ValidatorOutstandingRewardsRecord(betterproto.Message):
    """
    ValidatorOutstandingRewardsRecord is used for import/export via genesis
    json.
    """

    # validator_address is the address of the validator.
    validator_address: str = betterproto.string_field(1)
    # outstanding_rewards represents the oustanding rewards of a validator.
    outstanding_rewards: List[v1beta1.DecCoin] = betterproto.message_field(2)


@dataclass
class ValidatorAccumulatedCommissionRecord(betterproto.Message):
    """
    ValidatorAccumulatedCommissionRecord is used for import / export via
    genesis json.
    """

    # validator_address is the address of the validator.
    validator_address: str = betterproto.string_field(1)
    # accumulated is the accumulated commission of a validator.
    accumulated: "ValidatorAccumulatedCommission" = betterproto.message_field(2)


@dataclass
class ValidatorHistoricalRewardsRecord(betterproto.Message):
    """
    ValidatorHistoricalRewardsRecord is used for import / export via genesis
    json.
    """

    # validator_address is the address of the validator.
    validator_address: str = betterproto.string_field(1)
    # period defines the period the historical rewards apply to.
    period: int = betterproto.uint64_field(2)
    # rewards defines the historical rewards of a validator.
    rewards: "ValidatorHistoricalRewards" = betterproto.message_field(3)


@dataclass
class ValidatorCurrentRewardsRecord(betterproto.Message):
    """
    ValidatorCurrentRewardsRecord is used for import / export via genesis json.
    """

    # validator_address is the address of the validator.
    validator_address: str = betterproto.string_field(1)
    # rewards defines the current rewards of a validator.
    rewards: "ValidatorCurrentRewards" = betterproto.message_field(2)


@dataclass
class DelegatorStartingInfoRecord(betterproto.Message):
    """
    DelegatorStartingInfoRecord used for import / export via genesis json.
    """

    # delegator_address is the address of the delegator.
    delegator_address: str = betterproto.string_field(1)
    # validator_address is the address of the validator.
    validator_address: str = betterproto.string_field(2)
    # starting_info defines the starting info of a delegator.
    starting_info: "DelegatorStartingInfo" = betterproto.message_field(3)


@dataclass
class ValidatorSlashEventRecord(betterproto.Message):
    """
    ValidatorSlashEventRecord is used for import / export via genesis json.
    """

    # validator_address is the address of the validator.
    validator_address: str = betterproto.string_field(1)
    # height defines the block height at which the slash event occured.
    height: int = betterproto.uint64_field(2)
    # period is the period of the slash event.
    period: int = betterproto.uint64_field(3)
    # validator_slash_event describes the slash event.
    validator_slash_event: "ValidatorSlashEvent" = betterproto.message_field(4)


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the distribution module's genesis state."""

    # params defines all the paramaters of the module.
    params: "Params" = betterproto.message_field(1)
    # fee_pool defines the fee pool at genesis.
    fee_pool: "FeePool" = betterproto.message_field(2)
    # fee_pool defines the delegator withdraw infos at genesis.
    delegator_withdraw_infos: List["DelegatorWithdrawInfo"] = betterproto.message_field(
        3
    )
    # fee_pool defines the previous proposer at genesis.
    previous_proposer: str = betterproto.string_field(4)
    # fee_pool defines the outstanding rewards of all validators at genesis.
    outstanding_rewards: List[
        "ValidatorOutstandingRewardsRecord"
    ] = betterproto.message_field(5)
    # fee_pool defines the accumulated commisions of all validators at genesis.
    validator_accumulated_commissions: List[
        "ValidatorAccumulatedCommissionRecord"
    ] = betterproto.message_field(6)
    # fee_pool defines the historical rewards of all validators at genesis.
    validator_historical_rewards: List[
        "ValidatorHistoricalRewardsRecord"
    ] = betterproto.message_field(7)
    # fee_pool defines the current rewards of all validators at genesis.
    validator_current_rewards: List[
        "ValidatorCurrentRewardsRecord"
    ] = betterproto.message_field(8)
    # fee_pool defines the delegator starting infos at genesis.
    delegator_starting_infos: List[
        "DelegatorStartingInfoRecord"
    ] = betterproto.message_field(9)
    # fee_pool defines the validator slash events at genesis.
    validator_slash_events: List[
        "ValidatorSlashEventRecord"
    ] = betterproto.message_field(10)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the distribution Msg service."""

    async def set_withdraw_address(
        self, *, delegator_address: str = "", withdraw_address: str = ""
    ) -> MsgSetWithdrawAddressResponse:
        """
        SetWithdrawAddress defines a method to change the withdraw address for
        a delegator (or validator self-delegation).
        """

        request = MsgSetWithdrawAddress()
        request.delegator_address = delegator_address
        request.withdraw_address = withdraw_address

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Msg/SetWithdrawAddress",
            request,
            MsgSetWithdrawAddressResponse,
        )

    async def withdraw_delegator_reward(
        self, *, delegator_address: str = "", validator_address: str = ""
    ) -> MsgWithdrawDelegatorRewardResponse:
        """
        WithdrawDelegatorReward defines a method to withdraw rewards of
        delegator from a single validator.
        """

        request = MsgWithdrawDelegatorReward()
        request.delegator_address = delegator_address
        request.validator_address = validator_address

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Msg/WithdrawDelegatorReward",
            request,
            MsgWithdrawDelegatorRewardResponse,
        )

    async def withdraw_validator_commission(
        self, *, validator_address: str = ""
    ) -> MsgWithdrawValidatorCommissionResponse:
        """
        WithdrawValidatorCommission defines a method to withdraw the full
        commission to the validator address.
        """

        request = MsgWithdrawValidatorCommission()
        request.validator_address = validator_address

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Msg/WithdrawValidatorCommission",
            request,
            MsgWithdrawValidatorCommissionResponse,
        )

    async def fund_community_pool(
        self, *, amount: List[v1beta1.Coin] = [], depositor: str = ""
    ) -> MsgFundCommunityPoolResponse:
        """
        FundCommunityPool defines a method to allow an account to directly fund
        the community pool.
        """

        request = MsgFundCommunityPool()
        if amount is not None:
            request.amount = amount
        request.depositor = depositor

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Msg/FundCommunityPool",
            request,
            MsgFundCommunityPoolResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC querier service for distribution module."""

    async def params(self) -> QueryParamsResponse:
        """Params queries params of the distribution module."""

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/Params",
            request,
            QueryParamsResponse,
        )

    async def validator_outstanding_rewards(
        self, *, validator_address: str = ""
    ) -> QueryValidatorOutstandingRewardsResponse:
        """
        ValidatorOutstandingRewards queries rewards of a validator address.
        """

        request = QueryValidatorOutstandingRewardsRequest()
        request.validator_address = validator_address

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/ValidatorOutstandingRewards",
            request,
            QueryValidatorOutstandingRewardsResponse,
        )

    async def validator_commission(
        self, *, validator_address: str = ""
    ) -> QueryValidatorCommissionResponse:
        """
        ValidatorCommission queries accumulated commission for a validator.
        """

        request = QueryValidatorCommissionRequest()
        request.validator_address = validator_address

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/ValidatorCommission",
            request,
            QueryValidatorCommissionResponse,
        )

    async def validator_slashes(
        self,
        *,
        validator_address: str = "",
        starting_height: int = 0,
        ending_height: int = 0,
        pagination: Optional[v1beta1.PageRequest] = None,
    ) -> QueryValidatorSlashesResponse:
        """ValidatorSlashes queries slash events of a validator."""

        request = QueryValidatorSlashesRequest()
        request.validator_address = validator_address
        request.starting_height = starting_height
        request.ending_height = ending_height
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/ValidatorSlashes",
            request,
            QueryValidatorSlashesResponse,
        )

    async def delegation_rewards(
        self, *, delegator_address: str = "", validator_address: str = ""
    ) -> QueryDelegationRewardsResponse:
        """
        DelegationRewards queries the total rewards accrued by a delegation.
        """

        request = QueryDelegationRewardsRequest()
        request.delegator_address = delegator_address
        request.validator_address = validator_address

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/DelegationRewards",
            request,
            QueryDelegationRewardsResponse,
        )

    async def delegation_total_rewards(
        self, *, delegator_address: str = ""
    ) -> QueryDelegationTotalRewardsResponse:
        """
        DelegationTotalRewards queries the total rewards accrued by a each
        validator.
        """

        request = QueryDelegationTotalRewardsRequest()
        request.delegator_address = delegator_address

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/DelegationTotalRewards",
            request,
            QueryDelegationTotalRewardsResponse,
        )

    async def delegator_validators(
        self, *, delegator_address: str = ""
    ) -> QueryDelegatorValidatorsResponse:
        """DelegatorValidators queries the validators of a delegator."""

        request = QueryDelegatorValidatorsRequest()
        request.delegator_address = delegator_address

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/DelegatorValidators",
            request,
            QueryDelegatorValidatorsResponse,
        )

    async def delegator_withdraw_address(
        self, *, delegator_address: str = ""
    ) -> QueryDelegatorWithdrawAddressResponse:
        """
        DelegatorWithdrawAddress queries withdraw address of a delegator.
        """

        request = QueryDelegatorWithdrawAddressRequest()
        request.delegator_address = delegator_address

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/DelegatorWithdrawAddress",
            request,
            QueryDelegatorWithdrawAddressResponse,
        )

    async def community_pool(self) -> QueryCommunityPoolResponse:
        """CommunityPool queries the community pool coins."""

        request = QueryCommunityPoolRequest()

        return await self._unary_unary(
            "/cosmos.distribution.v1beta1.Query/CommunityPool",
            request,
            QueryCommunityPoolResponse,
        )
