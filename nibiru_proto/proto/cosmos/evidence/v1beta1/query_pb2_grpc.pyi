"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import cosmos.evidence.v1beta1.query_pb2
import grpc

class QueryStub:
    """Query defines the gRPC querier service."""

    def __init__(self, channel: grpc.Channel) -> None: ...
    Evidence: grpc.UnaryUnaryMultiCallable[
        cosmos.evidence.v1beta1.query_pb2.QueryEvidenceRequest,
        cosmos.evidence.v1beta1.query_pb2.QueryEvidenceResponse,
    ]
    """Evidence queries evidence based on evidence hash."""
    AllEvidence: grpc.UnaryUnaryMultiCallable[
        cosmos.evidence.v1beta1.query_pb2.QueryAllEvidenceRequest,
        cosmos.evidence.v1beta1.query_pb2.QueryAllEvidenceResponse,
    ]
    """AllEvidence queries all evidence."""

class QueryServicer(metaclass=abc.ABCMeta):
    """Query defines the gRPC querier service."""

    @abc.abstractmethod
    def Evidence(
        self,
        request: cosmos.evidence.v1beta1.query_pb2.QueryEvidenceRequest,
        context: grpc.ServicerContext,
    ) -> cosmos.evidence.v1beta1.query_pb2.QueryEvidenceResponse:
        """Evidence queries evidence based on evidence hash."""
    @abc.abstractmethod
    def AllEvidence(
        self,
        request: cosmos.evidence.v1beta1.query_pb2.QueryAllEvidenceRequest,
        context: grpc.ServicerContext,
    ) -> cosmos.evidence.v1beta1.query_pb2.QueryAllEvidenceResponse:
        """AllEvidence queries all evidence."""

def add_QueryServicer_to_server(servicer: QueryServicer, server: grpc.Server) -> None: ...
