# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/evidence/v1beta1/tx.proto, cosmos/evidence/v1beta1/evidence.proto, cosmos/evidence/v1beta1/query.proto, cosmos/evidence/v1beta1/genesis.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import List, Optional

import betterproto
import grpclib

from .cosmos.base.query import v1beta1
from .google import protobuf


@dataclass
class MsgSubmitEvidence(betterproto.Message):
    """
    MsgSubmitEvidence represents a message that supports submitting arbitrary
    Evidence of misbehavior such as equivocation or counterfactual signing.
    """

    submitter: str = betterproto.string_field(1)
    evidence: protobuf.Any = betterproto.message_field(2)


@dataclass
class MsgSubmitEvidenceResponse(betterproto.Message):
    """
    MsgSubmitEvidenceResponse defines the Msg/SubmitEvidence response type.
    """

    # hash defines the hash of the evidence.
    hash: bytes = betterproto.bytes_field(4)


@dataclass
class Equivocation(betterproto.Message):
    """
    Equivocation implements the Evidence interface and defines evidence of
    double signing misbehavior.
    """

    height: int = betterproto.int64_field(1)
    time: datetime = betterproto.message_field(2)
    power: int = betterproto.int64_field(3)
    consensus_address: str = betterproto.string_field(4)


@dataclass
class QueryEvidenceRequest(betterproto.Message):
    """
    QueryEvidenceRequest is the request type for the Query/Evidence RPC method.
    """

    # evidence_hash defines the hash of the requested evidence.
    evidence_hash: bytes = betterproto.bytes_field(1)


@dataclass
class QueryEvidenceResponse(betterproto.Message):
    """
    QueryEvidenceResponse is the response type for the Query/Evidence RPC
    method.
    """

    # evidence returns the requested evidence.
    evidence: protobuf.Any = betterproto.message_field(1)


@dataclass
class QueryAllEvidenceRequest(betterproto.Message):
    """
    QueryEvidenceRequest is the request type for the Query/AllEvidence RPC
    method.
    """

    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(1)


@dataclass
class QueryAllEvidenceResponse(betterproto.Message):
    """
    QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC
    method.
    """

    # evidence returns all evidences.
    evidence: List[protobuf.Any] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the evidence module's genesis state."""

    # evidence defines all the evidence at genesis.
    evidence: List[protobuf.Any] = betterproto.message_field(1)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the evidence Msg service."""

    async def submit_evidence(
        self, *, submitter: str = "", evidence: Optional[protobuf.Any] = None
    ) -> MsgSubmitEvidenceResponse:
        """
        SubmitEvidence submits an arbitrary Evidence of misbehavior such as
        equivocation or counterfactual signing.
        """

        request = MsgSubmitEvidence()
        request.submitter = submitter
        if evidence is not None:
            request.evidence = evidence

        return await self._unary_unary(
            "/cosmos.evidence.v1beta1.Msg/SubmitEvidence",
            request,
            MsgSubmitEvidenceResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC querier service."""

    async def evidence(self, *, evidence_hash: bytes = b"") -> QueryEvidenceResponse:
        """Evidence queries evidence based on evidence hash."""

        request = QueryEvidenceRequest()
        request.evidence_hash = evidence_hash

        return await self._unary_unary(
            "/cosmos.evidence.v1beta1.Query/Evidence",
            request,
            QueryEvidenceResponse,
        )

    async def all_evidence(
        self, *, pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryAllEvidenceResponse:
        """AllEvidence queries all evidence."""

        request = QueryAllEvidenceRequest()
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.evidence.v1beta1.Query/AllEvidence",
            request,
            QueryAllEvidenceResponse,
        )
