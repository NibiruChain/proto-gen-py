"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc
import perp.v1.query_pb2

class QueryStub:
    """Query defines the gRPC querier service."""

    def __init__(self, channel: grpc.Channel) -> None: ...
    Params: grpc.UnaryUnaryMultiCallable[
        perp.v1.query_pb2.QueryParamsRequest,
        perp.v1.query_pb2.QueryParamsResponse,
    ]
    """Parameters queries the parameters of the x/perp module."""
    QueryPosition: grpc.UnaryUnaryMultiCallable[
        perp.v1.query_pb2.QueryPositionRequest,
        perp.v1.query_pb2.QueryPositionResponse,
    ]
    QueryPositions: grpc.UnaryUnaryMultiCallable[
        perp.v1.query_pb2.QueryPositionsRequest,
        perp.v1.query_pb2.QueryPositionsResponse,
    ]
    CumulativePremiumFraction: grpc.UnaryUnaryMultiCallable[
        perp.v1.query_pb2.QueryCumulativePremiumFractionRequest,
        perp.v1.query_pb2.QueryCumulativePremiumFractionResponse,
    ]
    """Queries the latest cumulative premium fraction and the estimated next cumulative premium fraction."""
    Metrics: grpc.UnaryUnaryMultiCallable[
        perp.v1.query_pb2.QueryMetricsRequest,
        perp.v1.query_pb2.QueryMetricsResponse,
    ]

class QueryServicer(metaclass=abc.ABCMeta):
    """Query defines the gRPC querier service."""

    @abc.abstractmethod
    def Params(
        self,
        request: perp.v1.query_pb2.QueryParamsRequest,
        context: grpc.ServicerContext,
    ) -> perp.v1.query_pb2.QueryParamsResponse:
        """Parameters queries the parameters of the x/perp module."""
    @abc.abstractmethod
    def QueryPosition(
        self,
        request: perp.v1.query_pb2.QueryPositionRequest,
        context: grpc.ServicerContext,
    ) -> perp.v1.query_pb2.QueryPositionResponse: ...
    @abc.abstractmethod
    def QueryPositions(
        self,
        request: perp.v1.query_pb2.QueryPositionsRequest,
        context: grpc.ServicerContext,
    ) -> perp.v1.query_pb2.QueryPositionsResponse: ...
    @abc.abstractmethod
    def CumulativePremiumFraction(
        self,
        request: perp.v1.query_pb2.QueryCumulativePremiumFractionRequest,
        context: grpc.ServicerContext,
    ) -> perp.v1.query_pb2.QueryCumulativePremiumFractionResponse:
        """Queries the latest cumulative premium fraction and the estimated next cumulative premium fraction."""
    @abc.abstractmethod
    def Metrics(
        self,
        request: perp.v1.query_pb2.QueryMetricsRequest,
        context: grpc.ServicerContext,
    ) -> perp.v1.query_pb2.QueryMetricsResponse: ...

def add_QueryServicer_to_server(servicer: QueryServicer, server: grpc.Server) -> None: ...
