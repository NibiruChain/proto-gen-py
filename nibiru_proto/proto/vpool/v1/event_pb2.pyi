"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class ReserveSnapshotSavedEvent(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PAIR_FIELD_NUMBER: builtins.int
    QUOTE_RESERVE_FIELD_NUMBER: builtins.int
    BASE_RESERVE_FIELD_NUMBER: builtins.int
    MARK_PRICE_FIELD_NUMBER: builtins.int
    BLOCK_HEIGHT_FIELD_NUMBER: builtins.int
    BLOCK_TIMESTAMP_FIELD_NUMBER: builtins.int
    pair: builtins.str
    quote_reserve: builtins.str
    base_reserve: builtins.str
    mark_price: builtins.str
    """MarkPrice at the end of the block. 
    (instantaneous) markPrice := quoteReserve / baseReserve
    """
    block_height: builtins.int
    @property
    def block_timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    def __init__(
        self,
        *,
        pair: builtins.str = ...,
        quote_reserve: builtins.str = ...,
        base_reserve: builtins.str = ...,
        mark_price: builtins.str = ...,
        block_height: builtins.int = ...,
        block_timestamp: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["block_timestamp", b"block_timestamp"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["base_reserve", b"base_reserve", "block_height", b"block_height", "block_timestamp", b"block_timestamp", "mark_price", b"mark_price", "pair", b"pair", "quote_reserve", b"quote_reserve"]) -> None: ...

global___ReserveSnapshotSavedEvent = ReserveSnapshotSavedEvent

@typing_extensions.final
class SwapOnVpoolEvent(google.protobuf.message.Message):
    """A swap on the vpool represented by 'pair'. 
    Amounts are negative or positive base on the perspective of the pool, i.e.
    a negative quote means the trader has gained quote and the vpool lost quote.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PAIR_FIELD_NUMBER: builtins.int
    QUOTE_AMOUNT_FIELD_NUMBER: builtins.int
    BASE_AMOUNT_FIELD_NUMBER: builtins.int
    pair: builtins.str
    quote_amount: builtins.str
    """delta in the quote reserves of the vpool"""
    base_amount: builtins.str
    """delta in the base reserves of the vpool"""
    def __init__(
        self,
        *,
        pair: builtins.str = ...,
        quote_amount: builtins.str = ...,
        base_amount: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["base_amount", b"base_amount", "pair", b"pair", "quote_amount", b"quote_amount"]) -> None: ...

global___SwapOnVpoolEvent = SwapOnVpoolEvent

@typing_extensions.final
class MarkPriceChangedEvent(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PAIR_FIELD_NUMBER: builtins.int
    PRICE_FIELD_NUMBER: builtins.int
    BLOCK_TIMESTAMP_FIELD_NUMBER: builtins.int
    pair: builtins.str
    price: builtins.str
    @property
    def block_timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    def __init__(
        self,
        *,
        pair: builtins.str = ...,
        price: builtins.str = ...,
        block_timestamp: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["block_timestamp", b"block_timestamp"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["block_timestamp", b"block_timestamp", "pair", b"pair", "price", b"price"]) -> None: ...

global___MarkPriceChangedEvent = MarkPriceChangedEvent
