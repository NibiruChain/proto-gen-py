# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: incentivization/v1/incentivization.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import List, Optional

import betterproto
import grpclib

from .cosmos.base import v1beta1
from .cosmos.base.query import v1beta1


@dataclass
class MsgCreateIncentivizationProgram(betterproto.Message):
    """
    MsgCreateIncentivizationProgram is the request needed for the
    CreateIncentivizationProgram RPC.
    """

    # sender defines the sender of the msg that needs to be signed.
    sender: str = betterproto.string_field(1)
    # lp_denom defines the liquidity pool denom that we want to incentivize.
    lp_denom: str = betterproto.string_field(2)
    # min_lockup_duration defines the minimum lockup duration required on the
    # lp_denom to get the incentivization.
    min_lockup_duration: timedelta = betterproto.message_field(3)
    # start_time identifies when the incentivization starts.
    start_time: datetime = betterproto.message_field(4)
    # epochs defines the number of epochs the incentivization program will last.
    epochs: int = betterproto.int64_field(5)
    # initial_funds defines the initial funds to bootstrap the incentivization
    # program's escrow. This is optional.
    initial_funds: List[v1beta1.Coin] = betterproto.message_field(7)


@dataclass
class MsgCreateIncentivizationProgramResponse(betterproto.Message):
    """
    MsgCreateIncentivizationProgramResponse is the response returned by the
    CreateIncentivizationProgram RPC.
    """

    # program_id defines the incentivization program unique identifier.
    program_id: int = betterproto.uint64_field(1)


@dataclass
class MsgFundIncentivizationProgram(betterproto.Message):
    """
    MsgFundIncentivizationProgram is the request for the
    FundIncentivizationProgram RPC.
    """

    # sender is the sender of the requests
    sender: str = betterproto.string_field(1)
    # id marks the incentivization program id.
    id: int = betterproto.uint64_field(2)
    # funds is the amount of money sender deposits in the program funding escrow.
    funds: List[v1beta1.Coin] = betterproto.message_field(3)


@dataclass
class MsgFundIncentivizationProgramResponse(betterproto.Message):
    pass


@dataclass
class IncentivizationProgram(betterproto.Message):
    """
    IncentivizationProgram defines how an incentivization program looks like.
    """

    # id defines the unique uint64 id of the program
    id: int = betterproto.uint64_field(1)
    # escrow_address defines the escrow module account address for the
    # incentivization program.
    escrow_address: str = betterproto.string_field(2)
    # remaining_epochs defines the number of epochs left before the
    # incentivization program can be considered finalized.
    remaining_epochs: int = betterproto.int64_field(3)
    # lp_denom defines the liquidity pool denom that is being incentivized.
    lp_denom: str = betterproto.string_field(4)
    # min_lockup_duration defines the minimum lp_denom lockup period required to
    # get the epochs' rewards.
    min_lockup_duration: timedelta = betterproto.message_field(5)
    # start_time defines the incentivization program start time.
    start_time: datetime = betterproto.message_field(6)


@dataclass
class GenesisState(betterproto.Message):
    incentivization_programs: List[
        "IncentivizationProgram"
    ] = betterproto.message_field(1)


@dataclass
class QueryIncentivizationProgramRequest(betterproto.Message):
    id: int = betterproto.uint64_field(1)


@dataclass
class QueryIncentivizationProgramResponse(betterproto.Message):
    incentivization_program: "IncentivizationProgram" = betterproto.message_field(1)


@dataclass
class QueryIncentivizationProgramsRequest(betterproto.Message):
    pagination: v1beta1.PageRequest = betterproto.message_field(1)


@dataclass
class QueryIncentivizationProgramsResponse(betterproto.Message):
    incentivization_programs: List[
        "IncentivizationProgram"
    ] = betterproto.message_field(1)
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


class MsgStub(betterproto.ServiceStub):
    async def create_incentivization_program(
        self,
        *,
        sender: str = "",
        lp_denom: str = "",
        min_lockup_duration: Optional[timedelta] = None,
        start_time: Optional[datetime] = None,
        epochs: int = 0,
        initial_funds: List[v1beta1.Coin] = [],
    ) -> MsgCreateIncentivizationProgramResponse:
        """
        CreateIncentivizationProgram allows an entity to create an
        incentivization program for a liquidity pool.
        """

        request = MsgCreateIncentivizationProgram()
        request.sender = sender
        request.lp_denom = lp_denom
        if min_lockup_duration is not None:
            request.min_lockup_duration = min_lockup_duration
        if start_time is not None:
            request.start_time = start_time
        request.epochs = epochs
        if initial_funds is not None:
            request.initial_funds = initial_funds

        return await self._unary_unary(
            "/nibiru.incentivization.v1.Msg/CreateIncentivizationProgram",
            request,
            MsgCreateIncentivizationProgramResponse,
        )

    async def fund_incentivization_program(
        self, *, sender: str = "", id: int = 0, funds: List[v1beta1.Coin] = []
    ) -> MsgFundIncentivizationProgramResponse:
        """
        FundIncentivizationProgram allows an entity to fund an already existing
        incentivization program with more coins.
        """

        request = MsgFundIncentivizationProgram()
        request.sender = sender
        request.id = id
        if funds is not None:
            request.funds = funds

        return await self._unary_unary(
            "/nibiru.incentivization.v1.Msg/FundIncentivizationProgram",
            request,
            MsgFundIncentivizationProgramResponse,
        )


class QueryStub(betterproto.ServiceStub):
    async def incentivization_program(
        self, *, id: int = 0
    ) -> QueryIncentivizationProgramResponse:
        request = QueryIncentivizationProgramRequest()
        request.id = id

        return await self._unary_unary(
            "/nibiru.incentivization.v1.Query/IncentivizationProgram",
            request,
            QueryIncentivizationProgramResponse,
        )

    async def incentivization_programs(
        self, *, pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryIncentivizationProgramsResponse:
        request = QueryIncentivizationProgramsRequest()
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/nibiru.incentivization.v1.Query/IncentivizationPrograms",
            request,
            QueryIncentivizationProgramsResponse,
        )
