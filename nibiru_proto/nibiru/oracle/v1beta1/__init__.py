# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: oracle/v1beta1/genesis.proto, oracle/v1beta1/oracle.proto, oracle/v1beta1/query.proto, oracle/v1beta1/state.proto, oracle/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import timedelta
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class MsgAggregateExchangeRatePrevote(betterproto.Message):
    """
    MsgAggregateExchangeRatePrevote represents a message to submit aggregate
    exchange rate prevote.
    """

    hash: str = betterproto.string_field(1)
    feeder: str = betterproto.string_field(2)
    validator: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgAggregateExchangeRatePrevoteResponse(betterproto.Message):
    """
    MsgAggregateExchangeRatePrevoteResponse defines the
    Msg/AggregateExchangeRatePrevote response type.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgAggregateExchangeRateVote(betterproto.Message):
    """
    MsgAggregateExchangeRateVote represents a message to submit aggregate
    exchange rate vote.
    """

    salt: str = betterproto.string_field(1)
    exchange_rates: str = betterproto.string_field(2)
    feeder: str = betterproto.string_field(3)
    validator: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MsgAggregateExchangeRateVoteResponse(betterproto.Message):
    """
    MsgAggregateExchangeRateVoteResponse defines the
    Msg/AggregateExchangeRateVote response type.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgDelegateFeedConsent(betterproto.Message):
    """
    MsgDelegateFeedConsent represents a message to delegate oracle voting
    rights to another address.
    """

    operator: str = betterproto.string_field(1)
    delegate: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgDelegateFeedConsentResponse(betterproto.Message):
    """
    MsgDelegateFeedConsentResponse defines the Msg/DelegateFeedConsent response
    type.
    """

    pass


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the oracle module."""

    vote_period: int = betterproto.uint64_field(1)
    vote_threshold: str = betterproto.string_field(2)
    reward_band: str = betterproto.string_field(3)
    whitelist: List[str] = betterproto.string_field(4)
    slash_fraction: str = betterproto.string_field(5)
    slash_window: int = betterproto.uint64_field(6)
    min_valid_per_window: str = betterproto.string_field(7)
    twap_lookback_window: timedelta = betterproto.message_field(8)
    """amount of time to look back for TWAP calculations"""


@dataclass(eq=False, repr=False)
class AggregateExchangeRatePrevote(betterproto.Message):
    """
    struct for aggregate prevoting on the ExchangeRateVote. The purpose of
    aggregate prevote is to hide vote exchange rates with hash which is
    formatted as hex string in SHA256("{salt}:({pair},{exchange_rate})|...|({pa
    ir},{exchange_rate}):{voter}")
    """

    hash: str = betterproto.string_field(1)
    voter: str = betterproto.string_field(2)
    submit_block: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class AggregateExchangeRateVote(betterproto.Message):
    """
    MsgAggregateExchangeRateVote - struct for voting on the exchange rates
    different assets.
    """

    exchange_rate_tuples: List["ExchangeRateTuple"] = betterproto.message_field(1)
    voter: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ExchangeRateTuple(betterproto.Message):
    """
    ExchangeRateTuple - struct to store interpreted exchange rates data to
    store
    """

    pair: str = betterproto.string_field(1)
    exchange_rate: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PairReward(betterproto.Message):
    """
    PairReward defines a credit object towards validators which provide prices
    faithfully for different pairs.
    """

    pair: str = betterproto.string_field(1)
    """
    pair defines the pair for which we incentivize validator to provide prices
    for.
    """

    id: int = betterproto.uint64_field(2)
    """id uniquely identifies the rewards instance of the pair"""

    vote_periods: int = betterproto.uint64_field(3)
    """
    vote_periods defines the vote periods left in which rewards will be
    distributed.
    """

    coins: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(4)
    """
    coins defines the amount of coins to distribute in a single vote period.
    """


@dataclass(eq=False, repr=False)
class QueryExchangeRateRequest(betterproto.Message):
    """
    QueryExchangeRateRequest is the request type for the Query/ExchangeRate RPC
    method.
    """

    pair: str = betterproto.string_field(1)
    """pair defines the pair to query for."""


@dataclass(eq=False, repr=False)
class QueryExchangeRateResponse(betterproto.Message):
    """
    QueryExchangeRateResponse is response type for the Query/ExchangeRate RPC
    method.
    """

    exchange_rate: str = betterproto.string_field(1)
    """
    exchange_rate defines the exchange rate of assets voted by validators
    """


@dataclass(eq=False, repr=False)
class QueryExchangeRatesRequest(betterproto.Message):
    """
    QueryExchangeRatesRequest is the request type for the Query/ExchangeRates
    RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryExchangeRatesResponse(betterproto.Message):
    """
    QueryExchangeRatesResponse is response type for the Query/ExchangeRates RPC
    method.
    """

    exchange_rates: List["ExchangeRateTuple"] = betterproto.message_field(1)
    """
    exchange_rates defines a list of the exchange rate for all whitelisted
    pairs.
    """


@dataclass(eq=False, repr=False)
class QueryActivesRequest(betterproto.Message):
    """
    QueryActivesRequest is the request type for the Query/Actives RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryActivesResponse(betterproto.Message):
    """
    QueryActivesResponse is response type for the Query/Actives RPC method.
    """

    actives: List[str] = betterproto.string_field(1)
    """actives defines a list of the pair which oracle prices agreed upon."""


@dataclass(eq=False, repr=False)
class QueryVoteTargetsRequest(betterproto.Message):
    """
    QueryVoteTargetsRequest is the request type for the Query/VoteTargets RPC
    method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryVoteTargetsResponse(betterproto.Message):
    """
    QueryVoteTargetsResponse is response type for the Query/VoteTargets RPC
    method.
    """

    vote_targets: List[str] = betterproto.string_field(1)
    """
    vote_targets defines a list of the pairs in which everyone should vote in
    the current vote period.
    """


@dataclass(eq=False, repr=False)
class QueryFeederDelegationRequest(betterproto.Message):
    """
    QueryFeederDelegationRequest is the request type for the
    Query/FeederDelegation RPC method.
    """

    validator_addr: str = betterproto.string_field(1)
    """validator defines the validator address to query for."""


@dataclass(eq=False, repr=False)
class QueryFeederDelegationResponse(betterproto.Message):
    """
    QueryFeederDelegationResponse is response type for the
    Query/FeederDelegation RPC method.
    """

    feeder_addr: str = betterproto.string_field(1)
    """feeder_addr defines the feeder delegation of a validator"""


@dataclass(eq=False, repr=False)
class QueryMissCounterRequest(betterproto.Message):
    """
    QueryMissCounterRequest is the request type for the Query/MissCounter RPC
    method.
    """

    validator_addr: str = betterproto.string_field(1)
    """validator defines the validator address to query for."""


@dataclass(eq=False, repr=False)
class QueryMissCounterResponse(betterproto.Message):
    """
    QueryMissCounterResponse is response type for the Query/MissCounter RPC
    method.
    """

    miss_counter: int = betterproto.uint64_field(1)
    """miss_counter defines the oracle miss counter of a validator"""


@dataclass(eq=False, repr=False)
class QueryAggregatePrevoteRequest(betterproto.Message):
    """
    QueryAggregatePrevoteRequest is the request type for the
    Query/AggregatePrevote RPC method.
    """

    validator_addr: str = betterproto.string_field(1)
    """validator defines the validator address to query for."""


@dataclass(eq=False, repr=False)
class QueryAggregatePrevoteResponse(betterproto.Message):
    """
    QueryAggregatePrevoteResponse is response type for the
    Query/AggregatePrevote RPC method.
    """

    aggregate_prevote: "AggregateExchangeRatePrevote" = betterproto.message_field(1)
    """
    aggregate_prevote defines oracle aggregate prevote submitted by a validator
    in the current vote period
    """


@dataclass(eq=False, repr=False)
class QueryAggregatePrevotesRequest(betterproto.Message):
    """
    QueryAggregatePrevotesRequest is the request type for the
    Query/AggregatePrevotes RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryAggregatePrevotesResponse(betterproto.Message):
    """
    QueryAggregatePrevotesResponse is response type for the
    Query/AggregatePrevotes RPC method.
    """

    aggregate_prevotes: List[
        "AggregateExchangeRatePrevote"
    ] = betterproto.message_field(1)
    """
    aggregate_prevotes defines all oracle aggregate prevotes submitted in the
    current vote period
    """


@dataclass(eq=False, repr=False)
class QueryAggregateVoteRequest(betterproto.Message):
    """
    QueryAggregateVoteRequest is the request type for the Query/AggregateVote
    RPC method.
    """

    validator_addr: str = betterproto.string_field(1)
    """validator defines the validator address to query for."""


@dataclass(eq=False, repr=False)
class QueryAggregateVoteResponse(betterproto.Message):
    """
    QueryAggregateVoteResponse is response type for the Query/AggregateVote RPC
    method.
    """

    aggregate_vote: "AggregateExchangeRateVote" = betterproto.message_field(1)
    """
    aggregate_vote defines oracle aggregate vote submitted by a validator in
    the current vote period
    """


@dataclass(eq=False, repr=False)
class QueryAggregateVotesRequest(betterproto.Message):
    """
    QueryAggregateVotesRequest is the request type for the Query/AggregateVotes
    RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryAggregateVotesResponse(betterproto.Message):
    """
    QueryAggregateVotesResponse is response type for the Query/AggregateVotes
    RPC method.
    """

    aggregate_votes: List["AggregateExchangeRateVote"] = betterproto.message_field(1)
    """
    aggregate_votes defines all oracle aggregate votes submitted in the current
    vote period
    """


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params defines the parameters of the module."""


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the oracle module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    feeder_delegations: List["FeederDelegation"] = betterproto.message_field(2)
    exchange_rates: List["ExchangeRateTuple"] = betterproto.message_field(3)
    miss_counters: List["MissCounter"] = betterproto.message_field(4)
    aggregate_exchange_rate_prevotes: List[
        "AggregateExchangeRatePrevote"
    ] = betterproto.message_field(5)
    aggregate_exchange_rate_votes: List[
        "AggregateExchangeRateVote"
    ] = betterproto.message_field(6)
    pairs: List[str] = betterproto.string_field(7)
    pair_rewards: List["PairReward"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class FeederDelegation(betterproto.Message):
    """
    FeederDelegation is the address for where oracle feeder authority are
    delegated to. By default this struct is only used at genesis to feed in
    default feeder addresses.
    """

    feeder_address: str = betterproto.string_field(1)
    validator_address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MissCounter(betterproto.Message):
    """
    MissCounter defines an miss counter and validator address pair used in
    oracle module's genesis state
    """

    validator_address: str = betterproto.string_field(1)
    miss_counter: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class PriceSnapshot(betterproto.Message):
    """a snapshot of the prices at a given point in time"""

    pair: str = betterproto.string_field(1)
    price: str = betterproto.string_field(2)
    timestamp_ms: int = betterproto.int64_field(3)
    """milliseconds since unix epoch"""


class MsgStub(betterproto.ServiceStub):
    async def aggregate_exchange_rate_prevote(
        self,
        msg_aggregate_exchange_rate_prevote: "MsgAggregateExchangeRatePrevote",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgAggregateExchangeRatePrevoteResponse":
        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Msg/AggregateExchangeRatePrevote",
            msg_aggregate_exchange_rate_prevote,
            MsgAggregateExchangeRatePrevoteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def aggregate_exchange_rate_vote(
        self,
        msg_aggregate_exchange_rate_vote: "MsgAggregateExchangeRateVote",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgAggregateExchangeRateVoteResponse":
        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Msg/AggregateExchangeRateVote",
            msg_aggregate_exchange_rate_vote,
            MsgAggregateExchangeRateVoteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delegate_feed_consent(
        self,
        msg_delegate_feed_consent: "MsgDelegateFeedConsent",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDelegateFeedConsentResponse":
        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Msg/DelegateFeedConsent",
            msg_delegate_feed_consent,
            MsgDelegateFeedConsentResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def exchange_rate(
        self,
        query_exchange_rate_request: "QueryExchangeRateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryExchangeRateResponse":
        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/ExchangeRate",
            query_exchange_rate_request,
            QueryExchangeRateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def exchange_rate_twap(
        self,
        query_exchange_rate_request: "QueryExchangeRateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryExchangeRateResponse":
        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/ExchangeRateTwap",
            query_exchange_rate_request,
            QueryExchangeRateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def exchange_rates(
        self,
        query_exchange_rates_request: "QueryExchangeRatesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryExchangeRatesResponse":
        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/ExchangeRates",
            query_exchange_rates_request,
            QueryExchangeRatesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def actives(
        self,
        query_actives_request: "QueryActivesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryActivesResponse":
        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/Actives",
            query_actives_request,
            QueryActivesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def vote_targets(
        self,
        query_vote_targets_request: "QueryVoteTargetsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryVoteTargetsResponse":
        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/VoteTargets",
            query_vote_targets_request,
            QueryVoteTargetsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def feeder_delegation(
        self,
        query_feeder_delegation_request: "QueryFeederDelegationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryFeederDelegationResponse":
        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/FeederDelegation",
            query_feeder_delegation_request,
            QueryFeederDelegationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def miss_counter(
        self,
        query_miss_counter_request: "QueryMissCounterRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryMissCounterResponse":
        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/MissCounter",
            query_miss_counter_request,
            QueryMissCounterResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def aggregate_prevote(
        self,
        query_aggregate_prevote_request: "QueryAggregatePrevoteRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAggregatePrevoteResponse":
        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/AggregatePrevote",
            query_aggregate_prevote_request,
            QueryAggregatePrevoteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def aggregate_prevotes(
        self,
        query_aggregate_prevotes_request: "QueryAggregatePrevotesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAggregatePrevotesResponse":
        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/AggregatePrevotes",
            query_aggregate_prevotes_request,
            QueryAggregatePrevotesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def aggregate_vote(
        self,
        query_aggregate_vote_request: "QueryAggregateVoteRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAggregateVoteResponse":
        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/AggregateVote",
            query_aggregate_vote_request,
            QueryAggregateVoteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def aggregate_votes(
        self,
        query_aggregate_votes_request: "QueryAggregateVotesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAggregateVotesResponse":
        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/AggregateVotes",
            query_aggregate_votes_request,
            QueryAggregateVotesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/nibiru.oracle.v1beta1.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def aggregate_exchange_rate_prevote(
        self, msg_aggregate_exchange_rate_prevote: "MsgAggregateExchangeRatePrevote"
    ) -> "MsgAggregateExchangeRatePrevoteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def aggregate_exchange_rate_vote(
        self, msg_aggregate_exchange_rate_vote: "MsgAggregateExchangeRateVote"
    ) -> "MsgAggregateExchangeRateVoteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delegate_feed_consent(
        self, msg_delegate_feed_consent: "MsgDelegateFeedConsent"
    ) -> "MsgDelegateFeedConsentResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_aggregate_exchange_rate_prevote(
        self,
        stream: "grpclib.server.Stream[MsgAggregateExchangeRatePrevote, MsgAggregateExchangeRatePrevoteResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.aggregate_exchange_rate_prevote(request)
        await stream.send_message(response)

    async def __rpc_aggregate_exchange_rate_vote(
        self,
        stream: "grpclib.server.Stream[MsgAggregateExchangeRateVote, MsgAggregateExchangeRateVoteResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.aggregate_exchange_rate_vote(request)
        await stream.send_message(response)

    async def __rpc_delegate_feed_consent(
        self,
        stream: "grpclib.server.Stream[MsgDelegateFeedConsent, MsgDelegateFeedConsentResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delegate_feed_consent(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/nibiru.oracle.v1beta1.Msg/AggregateExchangeRatePrevote": grpclib.const.Handler(
                self.__rpc_aggregate_exchange_rate_prevote,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgAggregateExchangeRatePrevote,
                MsgAggregateExchangeRatePrevoteResponse,
            ),
            "/nibiru.oracle.v1beta1.Msg/AggregateExchangeRateVote": grpclib.const.Handler(
                self.__rpc_aggregate_exchange_rate_vote,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgAggregateExchangeRateVote,
                MsgAggregateExchangeRateVoteResponse,
            ),
            "/nibiru.oracle.v1beta1.Msg/DelegateFeedConsent": grpclib.const.Handler(
                self.__rpc_delegate_feed_consent,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDelegateFeedConsent,
                MsgDelegateFeedConsentResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def exchange_rate(
        self, query_exchange_rate_request: "QueryExchangeRateRequest"
    ) -> "QueryExchangeRateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def exchange_rate_twap(
        self, query_exchange_rate_request: "QueryExchangeRateRequest"
    ) -> "QueryExchangeRateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def exchange_rates(
        self, query_exchange_rates_request: "QueryExchangeRatesRequest"
    ) -> "QueryExchangeRatesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def actives(
        self, query_actives_request: "QueryActivesRequest"
    ) -> "QueryActivesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def vote_targets(
        self, query_vote_targets_request: "QueryVoteTargetsRequest"
    ) -> "QueryVoteTargetsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def feeder_delegation(
        self, query_feeder_delegation_request: "QueryFeederDelegationRequest"
    ) -> "QueryFeederDelegationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def miss_counter(
        self, query_miss_counter_request: "QueryMissCounterRequest"
    ) -> "QueryMissCounterResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def aggregate_prevote(
        self, query_aggregate_prevote_request: "QueryAggregatePrevoteRequest"
    ) -> "QueryAggregatePrevoteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def aggregate_prevotes(
        self, query_aggregate_prevotes_request: "QueryAggregatePrevotesRequest"
    ) -> "QueryAggregatePrevotesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def aggregate_vote(
        self, query_aggregate_vote_request: "QueryAggregateVoteRequest"
    ) -> "QueryAggregateVoteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def aggregate_votes(
        self, query_aggregate_votes_request: "QueryAggregateVotesRequest"
    ) -> "QueryAggregateVotesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_exchange_rate(
        self,
        stream: "grpclib.server.Stream[QueryExchangeRateRequest, QueryExchangeRateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.exchange_rate(request)
        await stream.send_message(response)

    async def __rpc_exchange_rate_twap(
        self,
        stream: "grpclib.server.Stream[QueryExchangeRateRequest, QueryExchangeRateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.exchange_rate_twap(request)
        await stream.send_message(response)

    async def __rpc_exchange_rates(
        self,
        stream: "grpclib.server.Stream[QueryExchangeRatesRequest, QueryExchangeRatesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.exchange_rates(request)
        await stream.send_message(response)

    async def __rpc_actives(
        self, stream: "grpclib.server.Stream[QueryActivesRequest, QueryActivesResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.actives(request)
        await stream.send_message(response)

    async def __rpc_vote_targets(
        self,
        stream: "grpclib.server.Stream[QueryVoteTargetsRequest, QueryVoteTargetsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.vote_targets(request)
        await stream.send_message(response)

    async def __rpc_feeder_delegation(
        self,
        stream: "grpclib.server.Stream[QueryFeederDelegationRequest, QueryFeederDelegationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.feeder_delegation(request)
        await stream.send_message(response)

    async def __rpc_miss_counter(
        self,
        stream: "grpclib.server.Stream[QueryMissCounterRequest, QueryMissCounterResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.miss_counter(request)
        await stream.send_message(response)

    async def __rpc_aggregate_prevote(
        self,
        stream: "grpclib.server.Stream[QueryAggregatePrevoteRequest, QueryAggregatePrevoteResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.aggregate_prevote(request)
        await stream.send_message(response)

    async def __rpc_aggregate_prevotes(
        self,
        stream: "grpclib.server.Stream[QueryAggregatePrevotesRequest, QueryAggregatePrevotesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.aggregate_prevotes(request)
        await stream.send_message(response)

    async def __rpc_aggregate_vote(
        self,
        stream: "grpclib.server.Stream[QueryAggregateVoteRequest, QueryAggregateVoteResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.aggregate_vote(request)
        await stream.send_message(response)

    async def __rpc_aggregate_votes(
        self,
        stream: "grpclib.server.Stream[QueryAggregateVotesRequest, QueryAggregateVotesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.aggregate_votes(request)
        await stream.send_message(response)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/nibiru.oracle.v1beta1.Query/ExchangeRate": grpclib.const.Handler(
                self.__rpc_exchange_rate,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryExchangeRateRequest,
                QueryExchangeRateResponse,
            ),
            "/nibiru.oracle.v1beta1.Query/ExchangeRateTwap": grpclib.const.Handler(
                self.__rpc_exchange_rate_twap,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryExchangeRateRequest,
                QueryExchangeRateResponse,
            ),
            "/nibiru.oracle.v1beta1.Query/ExchangeRates": grpclib.const.Handler(
                self.__rpc_exchange_rates,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryExchangeRatesRequest,
                QueryExchangeRatesResponse,
            ),
            "/nibiru.oracle.v1beta1.Query/Actives": grpclib.const.Handler(
                self.__rpc_actives,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryActivesRequest,
                QueryActivesResponse,
            ),
            "/nibiru.oracle.v1beta1.Query/VoteTargets": grpclib.const.Handler(
                self.__rpc_vote_targets,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryVoteTargetsRequest,
                QueryVoteTargetsResponse,
            ),
            "/nibiru.oracle.v1beta1.Query/FeederDelegation": grpclib.const.Handler(
                self.__rpc_feeder_delegation,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryFeederDelegationRequest,
                QueryFeederDelegationResponse,
            ),
            "/nibiru.oracle.v1beta1.Query/MissCounter": grpclib.const.Handler(
                self.__rpc_miss_counter,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryMissCounterRequest,
                QueryMissCounterResponse,
            ),
            "/nibiru.oracle.v1beta1.Query/AggregatePrevote": grpclib.const.Handler(
                self.__rpc_aggregate_prevote,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAggregatePrevoteRequest,
                QueryAggregatePrevoteResponse,
            ),
            "/nibiru.oracle.v1beta1.Query/AggregatePrevotes": grpclib.const.Handler(
                self.__rpc_aggregate_prevotes,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAggregatePrevotesRequest,
                QueryAggregatePrevotesResponse,
            ),
            "/nibiru.oracle.v1beta1.Query/AggregateVote": grpclib.const.Handler(
                self.__rpc_aggregate_vote,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAggregateVoteRequest,
                QueryAggregateVoteResponse,
            ),
            "/nibiru.oracle.v1beta1.Query/AggregateVotes": grpclib.const.Handler(
                self.__rpc_aggregate_votes,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAggregateVotesRequest,
                QueryAggregateVotesResponse,
            ),
            "/nibiru.oracle.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
        }
