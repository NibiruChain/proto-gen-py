# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: util/v1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class QueryModuleAccountsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryModuleAccountsResponse(betterproto.Message):
    accounts: List["AccountWithBalance"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AccountWithBalance(betterproto.Message):
    name: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)
    balance: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(3)


class QueryStub(betterproto.ServiceStub):
    async def module_accounts(
        self,
        query_module_accounts_request: "QueryModuleAccountsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryModuleAccountsResponse":
        return await self._unary_unary(
            "/nibiru.util.v1.Query/ModuleAccounts",
            query_module_accounts_request,
            QueryModuleAccountsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryBase(ServiceBase):
    async def module_accounts(
        self, query_module_accounts_request: "QueryModuleAccountsRequest"
    ) -> "QueryModuleAccountsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_module_accounts(
        self,
        stream: "grpclib.server.Stream[QueryModuleAccountsRequest, QueryModuleAccountsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.module_accounts(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/nibiru.util.v1.Query/ModuleAccounts": grpclib.const.Handler(
                self.__rpc_module_accounts,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryModuleAccountsRequest,
                QueryModuleAccountsResponse,
            ),
        }
