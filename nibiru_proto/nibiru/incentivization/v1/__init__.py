# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: incentivization/v1/incentivization.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import (
    datetime,
    timedelta,
)
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__
from ....cosmos.base.query import v1beta1 as ___cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class MsgCreateIncentivizationProgram(betterproto.Message):
    """
    MsgCreateIncentivizationProgram is the request needed for the
    CreateIncentivizationProgram RPC.
    """

    sender: str = betterproto.string_field(1)
    """sender defines the sender of the msg that needs to be signed."""

    lp_denom: str = betterproto.string_field(2)
    """
    lp_denom defines the liquidity pool denom that we want to incentivize.
    """

    min_lockup_duration: timedelta = betterproto.message_field(3)
    """
    min_lockup_duration defines the minimum lockup duration required on the
    lp_denom to get the incentivization.
    """

    start_time: datetime = betterproto.message_field(4)
    """start_time identifies when the incentivization starts."""

    epochs: int = betterproto.int64_field(5)
    """
    epochs defines the number of epochs the incentivization program will last.
    """

    initial_funds: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(7)
    """
    initial_funds defines the initial funds to bootstrap the incentivization
    program's escrow. This is optional.
    """


@dataclass(eq=False, repr=False)
class MsgCreateIncentivizationProgramResponse(betterproto.Message):
    """
    MsgCreateIncentivizationProgramResponse is the response returned by the
    CreateIncentivizationProgram RPC.
    """

    program_id: int = betterproto.uint64_field(1)
    """program_id defines the incentivization program unique identifier."""


@dataclass(eq=False, repr=False)
class MsgFundIncentivizationProgram(betterproto.Message):
    """
    MsgFundIncentivizationProgram is the request for the
    FundIncentivizationProgram RPC.
    """

    sender: str = betterproto.string_field(1)
    """sender is the sender of the requests"""

    id: int = betterproto.uint64_field(2)
    """id marks the incentivization program id."""

    funds: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(3)
    """
    funds is the amount of money sender deposits in the program funding escrow.
    """


@dataclass(eq=False, repr=False)
class MsgFundIncentivizationProgramResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class IncentivizationProgram(betterproto.Message):
    """
    IncentivizationProgram defines how an incentivization program looks like.
    """

    id: int = betterproto.uint64_field(1)
    """id defines the unique uint64 id of the program"""

    escrow_address: str = betterproto.string_field(2)
    """
    escrow_address defines the escrow module account address for the
    incentivization program.
    """

    remaining_epochs: int = betterproto.int64_field(3)
    """
    remaining_epochs defines the number of epochs left before the
    incentivization program can be considered finalized.
    """

    lp_denom: str = betterproto.string_field(4)
    """
    lp_denom defines the liquidity pool denom that is being incentivized.
    """

    min_lockup_duration: timedelta = betterproto.message_field(5)
    """
    min_lockup_duration defines the minimum lp_denom lockup period required to
    get the epochs' rewards.
    """

    start_time: datetime = betterproto.message_field(6)
    """start_time defines the incentivization program start time."""


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    incentivization_programs: List[
        "IncentivizationProgram"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryIncentivizationProgramRequest(betterproto.Message):
    id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryIncentivizationProgramResponse(betterproto.Message):
    incentivization_program: "IncentivizationProgram" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryIncentivizationProgramsRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryIncentivizationProgramsResponse(betterproto.Message):
    incentivization_programs: List[
        "IncentivizationProgram"
    ] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


class MsgStub(betterproto.ServiceStub):
    async def create_incentivization_program(
        self,
        msg_create_incentivization_program: "MsgCreateIncentivizationProgram",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreateIncentivizationProgramResponse":
        return await self._unary_unary(
            "/nibiru.incentivization.v1.Msg/CreateIncentivizationProgram",
            msg_create_incentivization_program,
            MsgCreateIncentivizationProgramResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fund_incentivization_program(
        self,
        msg_fund_incentivization_program: "MsgFundIncentivizationProgram",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgFundIncentivizationProgramResponse":
        return await self._unary_unary(
            "/nibiru.incentivization.v1.Msg/FundIncentivizationProgram",
            msg_fund_incentivization_program,
            MsgFundIncentivizationProgramResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def incentivization_program(
        self,
        query_incentivization_program_request: "QueryIncentivizationProgramRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryIncentivizationProgramResponse":
        return await self._unary_unary(
            "/nibiru.incentivization.v1.Query/IncentivizationProgram",
            query_incentivization_program_request,
            QueryIncentivizationProgramResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def incentivization_programs(
        self,
        query_incentivization_programs_request: "QueryIncentivizationProgramsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryIncentivizationProgramsResponse":
        return await self._unary_unary(
            "/nibiru.incentivization.v1.Query/IncentivizationPrograms",
            query_incentivization_programs_request,
            QueryIncentivizationProgramsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def create_incentivization_program(
        self, msg_create_incentivization_program: "MsgCreateIncentivizationProgram"
    ) -> "MsgCreateIncentivizationProgramResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fund_incentivization_program(
        self, msg_fund_incentivization_program: "MsgFundIncentivizationProgram"
    ) -> "MsgFundIncentivizationProgramResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_incentivization_program(
        self,
        stream: "grpclib.server.Stream[MsgCreateIncentivizationProgram, MsgCreateIncentivizationProgramResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_incentivization_program(request)
        await stream.send_message(response)

    async def __rpc_fund_incentivization_program(
        self,
        stream: "grpclib.server.Stream[MsgFundIncentivizationProgram, MsgFundIncentivizationProgramResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fund_incentivization_program(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/nibiru.incentivization.v1.Msg/CreateIncentivizationProgram": grpclib.const.Handler(
                self.__rpc_create_incentivization_program,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateIncentivizationProgram,
                MsgCreateIncentivizationProgramResponse,
            ),
            "/nibiru.incentivization.v1.Msg/FundIncentivizationProgram": grpclib.const.Handler(
                self.__rpc_fund_incentivization_program,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgFundIncentivizationProgram,
                MsgFundIncentivizationProgramResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def incentivization_program(
        self,
        query_incentivization_program_request: "QueryIncentivizationProgramRequest",
    ) -> "QueryIncentivizationProgramResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def incentivization_programs(
        self,
        query_incentivization_programs_request: "QueryIncentivizationProgramsRequest",
    ) -> "QueryIncentivizationProgramsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_incentivization_program(
        self,
        stream: "grpclib.server.Stream[QueryIncentivizationProgramRequest, QueryIncentivizationProgramResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.incentivization_program(request)
        await stream.send_message(response)

    async def __rpc_incentivization_programs(
        self,
        stream: "grpclib.server.Stream[QueryIncentivizationProgramsRequest, QueryIncentivizationProgramsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.incentivization_programs(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/nibiru.incentivization.v1.Query/IncentivizationProgram": grpclib.const.Handler(
                self.__rpc_incentivization_program,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryIncentivizationProgramRequest,
                QueryIncentivizationProgramResponse,
            ),
            "/nibiru.incentivization.v1.Query/IncentivizationPrograms": grpclib.const.Handler(
                self.__rpc_incentivization_programs,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryIncentivizationProgramsRequest,
                QueryIncentivizationProgramsResponse,
            ),
        }
